{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"drop",
				"dropTarget"
			],
			[
				"task",
				"taskElement"
			],
			[
				"loa",
				"loadedTasksList"
			],
			[
				"loca",
				"localStorage"
			],
			[
				"categ",
				"category〔variable〕"
			],
			[
				"curre",
				"currentTaskId〔variable〕"
			],
			[
				"curren",
				"currentTask〔variable〕"
			],
			[
				"remo",
				"remove〔function〕"
			],
			[
				"mi",
				"min-height"
			],
			[
				"sib",
				"next siblings〔function〕"
			],
			[
				"text-o",
				"text-overflow"
			],
			[
				"categor",
				"category-group"
			],
			[
				"apen",
				"appendTo"
			],
			[
				"dropped",
				"droppedItem"
			],
			[
				"dropp",
				"droppedItemId"
			],
			[
				"st",
				"stopPropagation"
			],
			[
				"prom",
				"prompter〔variable〕"
			],
			[
				"cu",
				"currentElement"
			],
			[
				"obj",
				"objectToMove"
			],
			[
				"original",
				"originalEvent〔variable〕"
			],
			[
				"app",
				"appendTo"
			],
			[
				"category",
				"categoryId"
			],
			[
				"parent",
				"parentListGroup"
			],
			[
				"list",
				"list-group"
			],
			[
				"object",
				"objectToMove〔variable〕"
			],
			[
				"data",
				"dataTransfer"
			],
			[
				"cat",
				"category"
			],
			[
				"margi",
				"margin"
			],
			[
				"dea",
				"detach〔function〕"
			],
			[
				"get",
				"getData"
			],
			[
				"origina",
				"originalEvent〔variable〕"
			],
			[
				"dro",
				"droppedItemHtml"
			],
			[
				"origi",
				"originalEvent〔variable〕"
			],
			[
				"ori",
				"originalEvent"
			],
			[
				"current",
				"currentElement"
			],
			[
				"paren",
				"parentElement〔variable〕"
			],
			[
				"pare",
				"parentElement〔variable〕"
			],
			[
				"hi",
				"highlighted-box"
			],
			[
				"add",
				"addClass〔function〕"
			],
			[
				"clo",
				"closest〔function〕"
			],
			[
				"upd",
				"$updated_res〔variable〕"
			],
			[
				"updated",
				"$updated_user_query〔variable〕"
			],
			[
				"mysqli",
				"mysqli〔class〕"
			],
			[
				"first",
				"$firstName〔variable〕"
			],
			[
				"up",
				"updateInfo"
			],
			[
				"fun",
				"function〔keyword〕"
			],
			[
				"update",
				"updateInfo〔function〕"
			],
			[
				"type",
				"type='text"
			],
			[
				"pro",
				"progress_bar"
			],
			[
				"progress",
				"progress_bar"
			],
			[
				"lo",
				"log"
			],
			[
				"webkit-ba",
				"-webkit-background-size: 〔property〕"
			],
			[
				"random",
				"randomColor"
			],
			[
				"ran",
				"randomItem"
			],
			[
				"btn",
				"btn-danger"
			],
			[
				"butto",
				"buttons"
			],
			[
				"profile",
				"profile_scripts"
			],
			[
				"succ",
				"successfully"
			],
			[
				"d",
				"display"
			],
			[
				"a",
				"ajax〔function〕"
			],
			[
				"bs3-navbar",
				"bs3-navbar\tbs3-navbar"
			],
			[
				"bs3-navba",
				"bs3-navbar:form\tbs3-navbar-form"
			],
			[
				"create",
				"create_message〔function〕"
			],
			[
				"wi",
				"width"
			],
			[
				"ima",
				"$imagepath〔variable〕"
			],
			[
				"presentat",
				"presentation_title"
			],
			[
				"head",
				"header〔function〕"
			],
			[
				"pre",
				"presentation_jumbotron"
			],
			[
				"mys",
				"mysql_connect〔function〕"
			],
			[
				"com",
				"$completed〔variable〕"
			],
			[
				"recip",
				"recipients"
			],
			[
				"rec",
				"recipients"
			],
			[
				"re",
				"recipients"
			],
			[
				"text",
				"textToSend"
			],
			[
				"incl",
				"include〔keyword〕"
			],
			[
				"ht",
				"https"
			],
			[
				"creat",
				"create_row〔function〕"
			],
			[
				"paddi",
				"padding"
			],
			[
				"font",
				"font-family"
			],
			[
				"n",
				"null"
			],
			[
				"MYS",
				"MYSQLI_NUM〔constant〕"
			],
			[
				"var",
				"var_dump〔function〕"
			],
			[
				"forE",
				"foreach〔keyword〕"
			],
			[
				"er",
				"error〔variable〕"
			],
			[
				"mysq",
				"mysqli〔class〕"
			],
			[
				"ms",
				"$msgs〔variable〕"
			],
			[
				"_se",
				"$_SESSION〔variable〕"
			],
			[
				"mysqli_fetch",
				"mysqli_fetch_assoc〔function〕"
			],
			[
				"mysqli_num",
				"mysqli_num_rows〔function〕"
			],
			[
				"print",
				"print_r〔function〕"
			],
			[
				"for",
				"foreach\tforeach …"
			],
			[
				"mysli_fe",
				"mysqli_fetch_assoc〔function〕"
			],
			[
				"_s",
				"$_SESSION〔variable〕"
			],
			[
				"login",
				"$login_form〔variable〕"
			],
			[
				"my",
				"mysql_error"
			],
			[
				"ty",
				"type='submit"
			],
			[
				"fons",
				"font-size"
			],
			[
				"margin-",
				"margin-right"
			],
			[
				"sess",
				"session_start〔function〕"
			],
			[
				"fon",
				"font-family"
			],
			[
				"padd",
				"padding"
			],
			[
				"_",
				"$_SESSION〔variable〕"
			],
			[
				"mysql",
				"mysql_connect〔function〕"
			],
			[
				"inc",
				"incl\tinclude …"
			],
			[
				"fi",
				"firstName"
			],
			[
				"incud",
				"include_once〔function〕"
			],
			[
				"_SE",
				"$_SESSION〔variable〕"
			],
			[
				"isset",
				"isset〔function〕"
			],
			[
				"ba",
				"background"
			],
			[
				"default",
				"defaults〔variable〕"
			],
			[
				"cle",
				"clear_data〔function〕"
			],
			[
				"fo",
				"form-control"
			],
			[
				"in",
				"input\tTag"
			],
			[
				"con",
				"$con〔variable〕"
			],
			[
				"panel",
				"panel_title"
			],
			[
				"pan",
				"$panel_class〔variable〕"
			],
			[
				"val",
				"validateForm〔function〕"
			],
			[
				"cre",
				"create_table_row〔function〕"
			],
			[
				"cl",
				"clear_data"
			],
			[
				"html",
				"htmlspecialchars〔function〕"
			],
			[
				"strip",
				"stripslashes〔function〕"
			],
			[
				"back",
				"background-color"
			],
			[
				"shuffle",
				"shuffleArray"
			],
			[
				"crea",
				"creator〔variable〕"
			],
			[
				"cr",
				"creator"
			],
			[
				"xm",
				"xmlc"
			],
			[
				"m",
				"main\tmethod (main)"
			],
			[
				"ad",
				"addActionListener"
			]
		]
	},
	"buffers":
	[
		{
			"file": "README.MD",
			"settings":
			{
				"buffer_size": 91,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "dnd.css",
			"settings":
			{
				"buffer_size": 433,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "dnd.js",
			"settings":
			{
				"buffer_size": 5471,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "dnd.html",
			"settings":
			{
				"buffer_size": 2586,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				]
			],
			[
				"Packages/C++/C++ Single File.sublime-build",
				"Run"
			]
		],
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/SublimeREPL/sublimerepl_build_system_hack.sublime-build",
					""
				]
			],
			[
				"Packages/C++/C++ Single File.sublime-build",
				"Run"
			]
		],
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				],
				[
					"Packages/SublimeREPL/sublimerepl_build_system_hack.sublime-build",
					""
				],
				[
					"Packages/User/c++k.sublime-build",
					""
				]
			],
			[
				"Packages/C++/C++ Single File.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Java/Ant.sublime-build",
					""
				],
				[
					"Packages/Java/JavaC.sublime-build",
					""
				],
				[
					"Packages/SublimeREPL/sublimerepl_build_system_hack.sublime-build",
					""
				]
			],
			[
				"Packages/Java/JavaC.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Makefile/Make.sublime-build",
					""
				],
				[
					"Packages/Makefile/Make.sublime-build",
					"Clean"
				]
			],
			[
				"Packages/Makefile/Make.sublime-build",
				"Clean"
			]
		],
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				],
				[
					"Packages/SublimeREPL/sublimerepl_build_system_hack.sublime-build",
					""
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				],
				[
					"Packages/SublimeREPL/sublimerepl_build_system_hack.sublime-build",
					""
				],
				[
					"Packages/User/pythonk.sublime-build",
					""
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/SublimeREPL/sublimerepl_build_system_hack.sublime-build",
					""
				],
				[
					"Packages/TypeScript/TypeScript.sublime-build",
					""
				]
			],
			[
				"Packages/TypeScript/TypeScript.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/SublimeREPL/sublimerepl_build_system_hack.sublime-build",
					""
				],
				[
					"Packages/User/node.sublime-build",
					""
				]
			],
			[
				"Packages/User/node.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 354.0,
		"last_filter": "p",
		"selected_items":
		[
			[
				"p",
				"Package Control: Install Package"
			],
			[
				"Ma",
				"Markdown HTML Preview"
			],
			[
				"javatar",
				"Javatar: Operations..."
			],
			[
				"7",
				"Snippet: bs3-col-7"
			],
			[
				"Markdown ",
				"Markdown HTML Preview"
			],
			[
				"Mark",
				"Preferences: Markmon Settings – Default"
			],
			[
				"pa",
				"Package Control: Remove Package"
			],
			[
				"mark",
				"Preferences: Markmon Settings – Default"
			],
			[
				"ma",
				"Markdown HTML Preview"
			],
			[
				"git",
				"Git: Graph Current File"
			],
			[
				"pa:in",
				"Package Control: Install Package"
			],
			[
				"pa:li",
				"Package Control: List Unmanaged Packages"
			],
			[
				"remove pa",
				"Package Control: Remove Package"
			],
			[
				"in",
				"Package Control: Install Package"
			],
			[
				"htm",
				"HTMLBeautify"
			],
			[
				"m",
				"Markdown HTML Preview"
			],
			[
				"",
				"Git: Push"
			],
			[
				"git comm",
				"Git: Commit"
			],
			[
				"git ",
				"Git: Add All"
			],
			[
				"ja",
				"Eclipse: Format Java"
			],
			[
				"MA",
				"Markdown HTML Preview"
			],
			[
				"Pa",
				"Package Control: Disable Package"
			],
			[
				"html",
				"HTMLBeautify"
			],
			[
				"import",
				"Snippet: import"
			],
			[
				"java",
				"Eclipse: Format Java"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"Pac",
				"Snippet: package"
			],
			[
				"PAcka",
				"Package Control: Install Package"
			],
			[
				"Packagae C",
				"Package Control: Install Package"
			],
			[
				"Packa",
				"Package Control: Create Package File"
			],
			[
				"Pack",
				"Package Control: Satisfy Dependencies"
			],
			[
				"A",
				"Achievement: View Achievements"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"Markm",
				"Markmon launch"
			],
			[
				"Markdo",
				"Preferences: Markmon Settings – Default"
			],
			[
				"Packag",
				"Package Control: Install Package"
			],
			[
				"theme",
				"Themr: Random theme"
			],
			[
				"markdow",
				"Markdown Preview: Preview in Browser"
			],
			[
				"Package Control: p",
				"Package Control: Install Package"
			],
			[
				"Package Control: ",
				"Package Control: Install Package"
			],
			[
				"Package Control: ins",
				"Package Control: Install Package"
			],
			[
				"Snippet: ",
				"Snippet: onready"
			],
			[
				"Package Control: T",
				"Package Control: Install Package"
			],
			[
				"Package Control: insta",
				"Package Control: Install Package"
			],
			[
				"Package Control: inst",
				"Package Control: Install Package"
			]
		],
		"width": 510.0
	},
	"console":
	{
		"height": 208.0,
		"history":
		[
			"view.run_command(\"remove_empty_lines\")",
			"view.run_command(\"remove_empty_lines2\")",
			"view.run_command(\"remove_empty_lines\")",
			"view.run_command(\"remove_empty_lines2\")",
			"type(x)",
			"x",
			"x = view.run_command(\"remove_empty_lines2\")",
			"view.run_command(\"remove_empty_lines2\")",
			"view.run_command(\"remove_empty_line2s\")",
			"view.run_command(\"remove_empty_line2\")",
			"view.run_command(\"remove_empty_lines\")",
			"clear",
			"cls",
			"view.run_command(\"remove_empty_lines\")",
			"view.run_command(\"remove_empty_line\")",
			"view.run_command(\"remove_line\")",
			"view.run_command(\"removeline\")",
			"view.run_command(\"remove\")",
			"view.run_command(\"clearlines\")",
			"view.run_command(\"example\")",
			"view.run_command(\"ClearLines\")",
			"view.run_command(\"clearlines\")",
			"view.run_command(\"example\")",
			"lineCounter",
			"lineCounter.py",
			"py",
			"files",
			"python -u argumental.py argumental.py",
			"python argumental.py argumental.py",
			"x = 1",
			"10 - 2 + (x = 6)",
			"10 - 2 + x = 6",
			"10 - 2",
			"help(print)",
			"help()",
			"x = 1",
			"help",
			"install",
			"python setup.py install",
			"Satisfy Dependency",
			"sys.version",
			"import sys",
			"git add *",
			"self.push",
			"view.run_command('run')",
			"loremCreator",
			"view.run_command('run')",
			"view.run_command('save')",
			"view.run_command('close')",
			"view.run_command('loremCreator')",
			"view.run_command('save')",
			"view.run_command('loremCreator')",
			"view.run_command('example')",
			"1 or not 1",
			"help(type(self))",
			"hel(type(self))",
			"git status",
			"1 or not 1",
			"1 and 0",
			"x and  1",
			"x & 1",
			"x && 1",
			"5 or 1",
			"1 or 5",
			"x<=94",
			"x<=9",
			"x>9",
			"x=9",
			"not not not not not not not not  False ",
			"not not not not not not not not not False",
			"not not not not not not not not not True",
			"not True",
			"print (!!!!True)",
			"print (3)",
			"print 3",
			"print",
			"from OS import *",
			"import OS",
			"print(p)",
			"p=3",
			"python",
			"git clone git://github.com/vhanla/SublimeTextTrans.git \"%APPDATA%\\Sublime Text 2\\Packages\\SublimeTextTrans\"",
			"`git clone git://github.com/vhanla/SublimeTextTrans.git \"%APPDATA%\\Sublime Text 2\\Packages\\SublimeTextTrans\"`",
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
			"a4"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": true
	},
	"file_history":
	[
		"/C/Users/manos_000/Documents/html/html 5 api/dnd.js",
		"/C/Users/manos_000/Documents/GitHub/sliders-ui/resources/js/sliderDetector.js",
		"/C/Users/manos_000/Documents/html/complete website/profile_scripts/update_info.php",
		"/C/Users/manos_000/Documents/html/complete website/includes/variables.php",
		"/C/Users/manos_000/Documents/html/complete website/navbar.php",
		"/C/Users/manos_000/Documents/html/complete website/includes/logout.inc.php",
		"/C/Users/manos_000/Documents/html/complete website/profile_scripts/send_messages.php",
		"/C/Users/manos_000/Documents/html/complete website/profile_scripts/messages.php",
		"/C/Users/manos_000/Documents/html/complete website/index.php",
		"/C/Users/manos_000/Documents/html/complete website/profile_scripts/navbar_profile.php",
		"/C/Users/manos_000/Documents/html/complete website/includes/login.inc.php",
		"/C/Users/manos_000/Documents/html/complete website/profile.php",
		"/C/Users/manos_000/Documents/html/jquery/progress.html",
		"/C/Users/manos_000/Documents/html/complete website/minigame/app.js",
		"/C/Users/manos_000/Documents/html/complete website/minigame/index.html",
		"/C/Users/manos_000/Documents/html/complete website/profile_scripts/donwoload_messages.php",
		"/C/Users/manos_000/Documents/GitHub/Css-generator-v5/src/index.html",
		"/C/Users/manos_000/Documents/html/complete website/sftp-config.json",
		"/C/Users/manos_000/Desktop/template/Restaurant-master/index.html",
		"/C/Users/manos_000/AppData/Local/Temp/fz3temp-1/dbhandler.php",
		"/C/Users/manos_000/Documents/html/complete website/help.php",
		"/C/Users/manos_000/Documents/html/complete website/includes/signup.inc.php",
		"/C/Users/manos_000/Desktop/index.html",
		"/C/Users/manos_000/Desktop/Νέος φάκελος/sql scripts/website/register.php",
		"/C/Users/manos_000/Documents/html/complete website/init database.sql",
		"/C/Users/manos_000/Documents/html/complete website/css/style.css",
		"/C/Users/manos_000/Documents/html/complete website/dbhandler.php",
		"/C/Users/manos_000/Documents/html/complete website/profile_scripts/update_messages.php",
		"/C/Users/manos_000/Documents/html/complete website/send_message.php",
		"/C/Users/manos_000/Documents/html/complete website/old.php",
		"/C/Users/manos_000/Documents/html/complete website/php.ini",
		"/C/Users/manos_000/Documents/html/complete website/mail.php",
		"/C/Users/manos_000/Documents/html/complete website/includes/fetch_messages.php",
		"/C/Users/manos_000/Desktop/Νέος φάκελος/sql scripts/website/view.php",
		"/C/Users/manos_000/Desktop/Restaurant-master/Restaurant-master/ideas",
		"/C/Users/manos_000/Documents/html/complete website/header.php",
		"/C/Users/manos_000/Documents/html/complete website/includes/signup.inc (2).php",
		"/C/Users/manos_000/Documents/html/complete website/includes/signup.inc (4).php",
		"/C/Users/manos_000/Documents/html/complete website/includes/signup.php",
		"/C/Users/manos_000/Documents/html/complete website/includes/login.php",
		"/C/Users/manos_000/Documents/html/complete website/includes/logout.php",
		"/C/Users/manos_000/Documents/html/complete website/logout.php",
		"/C/Users/manos_000/Documents/html/complete website/login.php",
		"/C/Users/manos_000/Documents/html/complete website/signup.php",
		"/C/Users/manos_000/Desktop/Restaurant-master/Restaurant-master/php_files/header.php",
		"/C/Users/manos_000/Desktop/Restaurant-master/Restaurant-master/php_files/login.php",
		"/C/Users/manos_000/Desktop/Restaurant-master/Restaurant-master/index.html",
		"/C/Users/manos_000/Desktop/Restaurant-master/Restaurant-master/php_files/reserve.php",
		"/C/Users/manos_000/Desktop/Restaurant-master/Restaurant-master/php_files/contact.php",
		"/C/Users/manos_000/Desktop/Restaurant-master/Restaurant-master/contact.php",
		"/C/Program Files/MySQL/MySQL Workbench 6.3 CE/mysql_system_status.vbs",
		"/C/Users/manos_000/Desktop/Restaurant-master/Restaurant-master/LICENSE",
		"/C/Users/manos_000/Desktop/Νέος φάκελος/sql scripts/website/admin/config.inc.php",
		"/C/php/php.ini",
		"/C/Users/manos_000/Desktop/Νέος φάκελος/sql scripts/website/index.php",
		"/C/Users/manos_000/Documents/GitHub/Css-generator-v5/LINKS.md",
		"/C/Users/manos_000/Documents/GitHub/Css-generator-v5/src/js/transformations.min.js",
		"/C/Users/manos_000/Desktop/htaccess",
		"/C/Users/manos_000/Desktop/Restaurant-master/Restaurant-master/js/main.js",
		"/C/Users/manos_000/Documents/javascript/jquery/plugins/fuck/fuck.js",
		"/C/Users/manos_000/Desktop/Νέος φάκελος/sql scripts/website/linkify.js",
		"/C/Users/manos_000/Desktop/Νέος φάκελος/sql scripts/tei/tp4428.sql",
		"/C/Users/manos_000/Documents/html/synaiterismos/db.php",
		"/C/Users/manos_000/Desktop/Νέος φάκελος/sql scripts/synaiterismos/create and insert.sql",
		"/C/Users/manos_000/Documents/html/browser.html",
		"/C/Users/manos_000/Documents/html/synaiterismos/login.php",
		"/C/Users/manos_000/Desktop/Restaurant-master/Restaurant-master/reserve.php",
		"/C/Users/manos_000/Documents/html/expanded list/list.html",
		"/C/Users/manos_000/Desktop/Νέος φάκελος/sql scripts/website/admin/config.sample.inc.php",
		"/C/Users/manos_000/Documents/GitHub/mycolors/index.html",
		"/C/Users/manos_000/Documents/GitHub/mycolors/index.js",
		"/C/Users/manos_000/Documents/GitHub/xml-creator/test.js",
		"/C/Users/manos_000/AppData/Roaming/MySQL/Workbench/log/wb.log",
		"/C/Program Files/MySQL/MySQL Workbench 6.3 CE/wbadminhelper.py",
		"/C/php/php.ini-production",
		"/C/Users/manos_000/Documents/GitHub/xml-creator/index.js",
		"/C/Users/manos_000/Documents/GitHub/mycolors/README.md",
		"/C/Users/manos_000/Documents/GitHub/xml-creator/package.json",
		"/C/Users/manos_000/Documents/GitHub/mycolors/.gitignore",
		"/C/Users/manos_000/Documents/GitHub/mycolors/colors.xml",
		"/C/Users/manos_000/Documents/GitHub/mycolors/xmlCreator.js",
		"/D/mycolors/start server.sh",
		"/C/Program Files (x86)/Google/Chrome/Application/chrome.VisualElementsManifest.xml",
		"/C/Users/manos_000/Documents/GitHub/mycolors/start server.sh",
		"/C/Users/manos_000/Documents/GitHub/mycolors/colors.md",
		"/C/Users/manos_000/AppData/Roaming/Sublime Text 3/Packages/User/Javatar.sublime-settings",
		"/C/Users/manos_000/Documents/java/sublime/Player.java",
		"/C/Users/manos_000/Documents/java/sublime/UI.java",
		"/C/Users/manos_000/Documents/java/exercises/Assign2.java",
		"/C/Users/manos_000/Desktop/Javatar.sublime-settings",
		"/C/Users/manos_000/Documents/java/sublime/Picked up JAVA_TOOL_OPTIONS",
		"/C/Users/manos_000/AppData/Roaming/Sublime Text 3/Packages/JavaImports/JavaImports.sublime-settings",
		"/C/Users/manos_000/Documents/javascript/es6/modules/lib.js",
		"/C/Users/manos_000/Documents/javascript/es6/modules/main.js",
		"/C/Users/manos_000/Documents/GitHub/mini-border-radius/src/js/miniBorderRadius.js",
		"/C/Users/manos_000/Documents/javascript/node/files.js",
		"/C/Users/manos_000/Documents/GitHub/Dom Storage/README.md",
		"/C/Users/manos_000/Desktop/favourites.css",
		"/C/Users/manos_000/Documents/javascript/requirejs/scripts/index.html",
		"/C/Users/manos_000/Documents/javascript/requirejs/scripts/test.js",
		"/C/Users/manos_000/Documents/javascript/requirejs/scripts/main.js",
		"/C/Users/manos_000/Documents/GitHub/Css-generator-v5/bower_components/bootbox.js/bootbox.js",
		"/C/Users/manos_000/Desktop/apk studio/big/apktool.yml",
		"/C/Users/manos_000/Desktop/apk studio/big/original/META-INF/MANIFEST.MF",
		"/C/Users/manos_000/Desktop/apk studio/big/assets/TILEMAPS",
		"/C/Users/manos_000/Music/ftp_test/hexRGB.js",
		"/C/Users/manos_000/Music/ftp_test/boxshadow.js",
		"/C/Users/manos_000/Music/ftp_test/borderRadius(lite).js",
		"/C/Users/manos_000/Music/ftp_test/rgba.js",
		"/C/Users/manos_000/Music/ftp_test/borderRadius.js",
		"/C/Users/manos_000/Documents/GitHub/Css-generator-v5/src/js/clear.js",
		"/C/Users/manos_000/Documents/GitHub/Css-generator-v5/src/js/foo.txt",
		"/C/Users/manos_000/Music/bookmarks-2013-12-30.json",
		"/C/Users/manos_000/Documents/javascript/node/foo.txt",
		"/C/Users/manos_000/Documents/GitHub/Dom Storage/validator.js",
		"/C/Users/manos_000/Documents/GitHub/Dom Storage/bower.json",
		"/C/Users/manos_000/Documents/GitHub/Css-generator-v5/bower_components/DomStorage/bower.json",
		"/C/Users/manos_000/Documents/GitHub/Css-generator-v5/bower.json",
		"/C/Users/manos_000/Documents/GitHub/Dom Storage/bower_components/DomStorage/.bower.json",
		"/C/Users/manos_000/Documents/GitHub/Css-generator-v5/src/js/domStorage.js",
		"/C/Users/manos_000/Documents/GitHub/Dom Storage/bower_components/DomStorage/domStorage.js",
		"/C/Users/manos_000/Documents/node.js/server/public_html/index.html",
		"/C/Users/manos_000/Documents/javascript/exercism.io/ecmascript/rna-transcription/rna-transcription.js",
		"/C/Users/manos_000/Documents/javascript/exercism.io/ecmascript/rna-transcription/gulpfile.js",
		"/C/Users/manos_000/Documents/javascript/exercism.io/ecmascript/rna-transcription/package.json",
		"/C/Users/manos_000/Documents/javascript/exercism.io/ecmascript/rna-transcription/rna-transcription.spec.js",
		"/C/Users/manos_000/Documents/node.js/server/server.js",
		"/C/Users/manos_000/Documents/node.js/server/404.html"
	],
	"find":
	{
		"height": 48.0
	},
	"find_in_files":
	{
		"height": 136.0,
		"where_history":
		[
			"<open files>index.html"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"@TODO",
			"createTask",
			"text-info",
			"category",
			"ui",
			"\"",
			"val",
			"\"",
			"mbstring",
			"jumbotron",
			"sqli",
			"Array.from(new Set(colors.sort()))",
			"x = ",
			"x",
			"(function($, window, document) {\n\t'use strict';\n\tvar appData = {\n\t\ttransform: [],\n\t\tboxShadow: [],\n\t\tborderRadius: [],\n\t\ttextShadow: []\n\t};\n\t//Bootstrap glyphicons should be wrapped inside a span\n\tvar icons = {\n\t\tok: \"<span class='glyphicon glyphicon-ok'></span>\",\n\t\tremove: \"<span class='glyphicon glyphicon-remove'></span>\",\n\t\ttrash: \"<span class='glyphicon glyphicon-trash'></span>\"\n\t};\n\tvar createBtn = (text,cName)=>{ return{label:text,className:cName}};\n\tvar domCache = new DomStorage();\n\tvar map = Array.prototype.map;\n\tvar demoOutput;\n\tvar x = '',\n\t\ty = '',\n\t\tz = '',\n\t\tfinal_transformation = 'none',\n\t\tscalex = '',\n\t\tscaley = '',\n\t\ttranslatex = '',\n\t\ttranslatey = '',\n\t\ttranslatez = '',\n\t\tskewY = '',\n\t\tskewX = '';\n\tvar hor = '',\n\t\tver = '',\n\t\tblur = '',\n\t\tspread = '',\n\t\tinset = '',\n\t\tred = \"0\",\n\t\tgreen = \"0\",\n\t\tblue = \"0\",\n\t\tcolor = 'rgb(250,48,90)',\n\t\tbshadow = 'none',\n\t\ttransparency = 1; //box-shadow\n\tvar tl = '',\n\t\ttr = '',\n\t\tbl = '',\n\t\tbr = '',\n\t\trad = 0; //border-radius\n\t//Text shadow properies\n\tvar text_shadow = \"none\",\n\t\ttext_shadow_x_axis = \"\",\n\t\ttext_shadow_y_axis = \"\",\n\t\ttext_shadow_blur = \"\";\n\t//Text shadow color\n\t//Note:We could use the color from the box-shadow but instead we choose to seperate box-shadow color from text-shadow color\n\tvar text_shadow_r = 0,\n\t\ttext_shadow_g = 0,\n\t\ttext_shadow_b = 0,\n\t\ttext_shadow_opacity = 0,\n\t\ttext_shadow_color = \"\";\n\tvar transform_fav = [],\n\t\tradius_fav = [],\n\t\tbox_fav = [],\n\t\ttext_fav = [];\n\tvar transform_col = 0,\n\t\tbox_col = 0,\n\t\tradius_col = 0,\n\t\ttext_col = 0; //columns in each table\n\tvar line = [false, false, false, false]; //this array is used to create a new row in each favourite table after adding 3 cells in each row\n\t//Select which generators you want to see on the page\n\tvar updateText = (selector, text) => domCache.get(selector).text(text);\n\tvar Color = function(red, green, blue, alpha = 1) {\n\t\tthis.r = red;\n\t\tthis.g = green;\n\t\tthis.b = blue;\n\t\tthis.a = alpha;\n\t\tthis.getColor = function() {\n\t\t\tif (this.a == 1)\n\t\t\t\treturn ` rgb(${this.r},${this.g},${this.b})`;\n\t\t\telse\n\t\t\t\treturn ` rgba(${this.r},${this.g},${this.b},${this.a})`;\n\t\t\t//return this.a==1?\" rgb(\" + this.r + \",\" + this.g + \",\" + this.b + \")\":\" rgba(\" + this.r + \",\" + this.g + \",\" + this.b + \",\" + this.a + \")\";\n\t\t}\n\t\tthis.toString = this.getColor;\n\t};\n\tvar log = (obj) => console.log(obj);\n\tvar len = (obj) => obj.length;\n\tvar areAllEmpty = function() {\n\t\t//Filter all the arrays that have a possitive length\n\t\t//If none of the arrays contains at least one elements return true\n\t\t//https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments\n\t\treturn Array.apply(null, arguments).filter(arg => !!arg.length).length == 0;\n\t};\n\tfunction saveCode(type) {\n\t\tvar prefix = (property, value) => {\n\t\t\tvar css = \"\";\n\t\t\tcss += \"-webkit-\" + property + \":\" + value + \";\\n\";\n\t\t\tcss += \"-moz-\" + property + \"   :\" + value + \";\\n\";\n\t\t\tcss += \"-ms-\" + property + \"    :\" + value + \";\\n\";\n\t\t\tcss += property + \"             :\" + value + \";\\n\";\n\t\t\treturn css;\n\t\t};\n\t\tvar file, blob;\n\t\tswitch (type) {\n\t\t\tcase \"f\":\n\t\t\t\tfile = \"/***\\n\";\n\t\t\t\tvar favourite_items = \"\";\n\t\t\t\ttransform_fav.forEach(value =>favourite_items += prefix(\"transform\", value));\n\t\t\t\tbox_fav.forEach(value =>favourite_items += prefix(\"box-shadow\", value));\n\t\t\t\tradius_fav.forEach(value =>favourite_items += `border-radius:${value};\\n`);\n\t\t\t\ttext_fav.forEach(value =>favourite_items += `text-shadow:${value};\\n`);\n\t\t\t\tfile += favourite_items;\n\t\t\t\tfile += \"***/\\n\";\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tif (bshadow == \"none\" && rad == 0 && final_transformation == \"none\" && text_shadow == \"none\")\n\t\t\t\t\treturn;\n\t\t\t\tfile = \"div{\\n\\t\";\n\t\t\t\tif (final_transformation != \"none\" && final_transformation)\n\t\t\t\t\tfile += prefix(\"transform\", final_transformation) + \"\\t\";\n\t\t\t\tif (bshadow && bshadow != \"none\")\n\t\t\t\t\tfile += prefix(\"box-shadow\", bshadow) + \"\\t\";\n\t\t\t\tif (rad != 0)\n\t\t\t\t\tfile += \"border-radius:\" + rad + \";\\n\\t\";\n\t\t\t\tif (text_shadow != \"none\")\n\t\t\t\t\tfile += \"text-shadow:\" + text_shadow + \";\\n\";\n\t\t\t\tfile += \"}\";\n\t\t\t\tbreak;\n\t\t} //switch\n\t\tblob = new Blob([file], {\n\t\t\ttype: \"text/plain;charset=utf-8\"\n\t\t});\n\t\tsaveAs(blob, `${type=='f'?'favourites':'transformations'}.css`);\n\t}\n\tfunction fav(type) {\n\t\tvar openRow = (selector) => $(selector).append(\"<tr>\");\n\t\tvar closeAndOpen = (selector) => $(selector).append(\"</tr><tr>\");\n\t\tif (type == \"text-shadow\") {\n\t\t\tif (text_shadow != \"none\" && text_fav.indexOf(text_shadow) == -1) {\n\t\t\t\ttext_fav.push(text_shadow);\n\t\t\t\tif (!line[3]) {\n\t\t\t\t\topenRow(\"#table_text tbody\");\n\t\t\t\t\tline[3] = true;\n\t\t\t\t}\n\t\t\t\tif (text_col % 3 == 0) {\n\t\t\t\t\tcloseAndOpen(\"#table_text\");\n\t\t\t\t}\n\t\t\t\t$(\"#table_text tr:last\").append(`<td class='marked text_marked'>${text_shadow}</td>`);\n\t\t\t\ttext_col++;\n\t\t\t\tupdateText(\"#text_total\", `(${len(text_fav)})`);\n\t\t\t}\n\t\t} else if (type == \"radius\") {\n\t\t\tif (rad && radius_fav.indexOf(rad) == -1) {\n\t\t\t\tradius_fav.push(rad);\n\t\t\t\tif (!line[2]) {\n\t\t\t\t\topenRow(\"#table_rad tbody\");\n\t\t\t\t\tline[2] = true;\n\t\t\t\t}\n\t\t\t\tif (radius_col % 3 == 0) {\n\t\t\t\t\tcloseAndOpen(\"#table_rad\");\n\t\t\t\t}\n\t\t\t\t$(\"#table_rad tbody tr:last\").append(`<td class='marked rad_marked'>${rad}</td>`);\n\t\t\t\tradius_col++;\n\t\t\t\tupdateText(\"#radius_total\", `(${len(radius_fav)})`);\n\t\t\t}\n\t\t} else if (type == \"transform\") {\n\t\t\tif (final_transformation && final_transformation != \"none\" && transform_fav.indexOf(final_transformation) == -1) {\n\t\t\t\ttransform_fav.push(final_transformation);\n\t\t\t\tif (!line[0]) {\n\t\t\t\t\topenRow(\"#table_tran tbody\");\n\t\t\t\t\tline[0] = true;\n\t\t\t\t}\n\t\t\t\t$(\"#table_tran tbody tr:last\").append(`<td class='transform_marked marked'>${final_transformation}</td>`);\n\t\t\t\ttransform_col++;\n\t\t\t\tif (transform_col % 3 == 0) {\n\t\t\t\t\tcloseAndOpen(\"#table_tran\");\n\t\t\t\t}\n\t\t\t\tupdateText(\"#totaltran\", `(${len(transform_fav)})`);\n\t\t\t}\n\t\t} else {\n\t\t\tif (bshadow != \"none\" && box_fav.indexOf(bshadow) == -1) {\n\t\t\t\tbox_fav.push(bshadow);\n\t\t\t\tif (!line[1]) {\n\t\t\t\t\topenRow(\"#table_box tbody\");\n\t\t\t\t\tline[1] = true;\n\t\t\t\t}\n\t\t\t\t$(\"#table_box tbody tr:last\").append(`<td class='box_marked marked'>${bshadow}</td>`);\n\t\t\t\tbox_col++;\n\t\t\t\tif (box_col % 3 == 0) {\n\t\t\t\t\tcloseAndOpen(\"#table_box\");\n\t\t\t\t}\n\t\t\t\tupdateText(\"#box_total\", `(${len(box_fav)})`);\n\t\t\t}\n\t\t}\n\t}\n\tfunction removefav() {\n\t\tif (areAllEmpty(box_fav, radius_fav, text_fav, transform_fav)) {\n\t\t\tbootbox.alert({\n\t\t\t\ttitle: \"Error\",\n\t\t\t\tmessage: \"There is nothing to remove\",\n\t\t\t\tbuttons: {ok:createBtn(`OK ${icons.ok}`,\"btn-success\")},\n\t\t\t\tclassName: \"errorAlert\"\n\t\t\t});\n\t\t\treturn;\n\t\t} else {\n\t\t\tvar options = {\n\t\t\t\ttitle: \"Warning\",\n\t\t\t\tmessage: \"Are you sure you want yo delete your favourites?\",\n\t\t\t\tbuttons: {\n\t\t\t\t\tconfirm:createBtn(`Delete${icons.trash}`,\"btn-danger\"),\n\t\t\t\t\tcancel:createBtn(`Cancel ${icons.ok}`,\"btn-success\")\n\t\t\t\t},\n\t\t\t\tcallback: (result) => {\n\t\t\t\t\tif (result) {\n\t\t\t\t\t\tbootbox.alert({\n\t\t\t\t\t\t\ttitle: \"Success\",\n\t\t\t\t\t\t\tmessage: \"Favourites removed\",\n\t\t\t\t\t\t\tbuttons: {ok:createBtn(`OK  ${icons.ok}`,\"btn-success\")},\n\t\t\t\t\t\t\tclassName: \"successAlert\"\n\t\t\t\t\t\t});\n\t\t\t\t\t\t//line[0] = line[1] = line[2] = line[3] = false;\n\t\t\t\t\t\tline = line.map(f => false);\n\t\t\t\t\t\t//empty all the lists\n\t\t\t\t\t\tbox_fav.length = radius_fav.length = transform_fav.length = text_fav.length = 0;\n\t\t\t\t\t\tupdateText(\"#box_total,#totaltran,#radius_total,#text_total\", \"(0)\");\n\t\t\t\t\t\t$(\".marked\").remove();\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tclassName: \"warningAlert\"\n\t\t\t};\n\t\t\tbootbox.confirm(options);\n\t\t}\n\t}\n\tvar saveToStorage = () => {\n\t\tif (!localStorage) {\n\t\t\tbootbox.alert({\n\t\t\t\ttitle: \"Unsupported API\",\n\t\t\t\tmessage: \"Your browser doesn't support localStorage.Please upgrade to a newer version\",\n\t\t\t\tbuttons: {ok:createBtn(`OK  ${icons.ok}`)},\n\t\t\t\tclassName: \"errorAlert\"\n\t\t\t});\n\t\t} else {\n\t\t\tlet dataExists = !!Lockr.get(\"appData\");\n\t\t\t//No favourites are available so exit\n\t\t\t//fixes #46\n\t\t\tif(areAllEmpty(radius_fav,box_fav,text_fav,transform_fav))\n\t\t\t\treturn;\n\t\t\tlet app = {\n\t\t\t\tborderRadius: radius_fav,\n\t\t\t\tboxShadow: box_fav,\n\t\t\t\ttextShadow: text_fav,\n\t\t\t\ttransform: transform_fav\n\t\t\t};\n\t\t\tif (dataExists) {\n\t\t\t\tbootbox.confirm({\n\t\t\t\t\ttitle: \"Be carefull\",\n\t\t\t\t\tmessage: \"There is another list of favourites\",\n\t\t\t\t\tbuttons: {\n\t\t\t\t\t\tconfirm:createBtn(`Override it${icons.remove}`,\"btn-warning\"),\n\t\t\t\t\t\tcancel:createBtn(`Do not override it ${icons.ok}`,\"btn-info\")\n\t\t\t\t\t},\n\t\t\t\t\tcallback: (result) => {\n\t\t\t\t\t\tif (result) {\n\t\t\t\t\t\t\tLockr.set(\"appData\", app);\n\t\t\t\t\t\t\tbootbox.alert({\n\t\t\t\t\t\t\t\ttitle: \"Override completed\",\n\t\t\t\t\t\t\t\tbuttons: {ok:createBtn(`OK  ${icons.ok}`,\"btn-success\")},\n\t\t\t\t\t\t\t\tmessage: \"List has been overrided\",\n\t\t\t\t\t\t\t\tclassName: \"successAlert\"\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tbootbox.alert({\n\t\t\t\t\t\t\t\ttitle: \"Error\",\n\t\t\t\t\t\t\t\tmessage: \"List override aborted\",\n\t\t\t\t\t\t\t\tbuttons: {ok:createBtn(`OK  ${icons.ok}`,\"btn-success\")},\n\t\t\t\t\t\t\t\tclassName: \"errorAlert\"\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tclassName: \"warningAlert\"\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tLockr.set(\"appData\", app)\n\t\t\t\tbootbox.alert({\n\t\t\t\t\ttitle: \"Success\",\n\t\t\t\t\tmessage: \"Favourites saved to localStorage\",\n\t\t\t\t\tbuttons: {ok: createBtn(`OK ${icons.ok}`,\"btn-success\")},\n\t\t\t\t\tclassName: \"successAlert\"\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n\tvar checkStorage = () => {\n\t\t//Check to see if localStorage is supported and if yes check\n\t\t//if there are any data to load\n\t\tif (!localStorage || !Lockr.get(\"appData\")) {\n\t\t\tlog(!!localStorage ? \"No data found\" : \"localStorage is not supported\");\n\t\t\treturn;\n\t\t}\n\t\t//localStorage is supported and there are data to load\n\t\tappData = Lockr.get(\"appData\");\n\t\t(appData.transform || []).forEach(item => {\n\t\t\tfinal_transformation = item;\n\t\t\tfav(\"transform\");\n\t\t});\n\t\t(appData.borderRadius || []).forEach(item => {\n\t\t\trad = item;\n\t\t\tfav(\"radius\");\n\t\t});\n\t\t(appData.boxShadow || []).forEach(item => {\n\t\t\tbshadow = item;\n\t\t\tfav();\n\t\t});\n\t\t(appData.textShadow || []).forEach(item => {\n\t\t\ttext_shadow = item;\n\t\t\tfav(\"text-shadow\");\n\t\t});\n\t\tbootbox.alert({\n\t\t\ttitle: \"Loaded favourites \",\n\t\t\tmessage: \"Favourites loaded\",\n\t\t\tbuttons: {ok: createBtn(`OK ${icons.ok}`,\"btn-success\")},\n\t\t\tclassName: \"successAlert\"\n\t\t});\n\t\tfinal_transformation = bshadow = text_shadow = \"none\",\n\t\t\trad = 0;\n\t\tsetTimeout(bootbox.hideAll, 3500);\n\t};\n\tvar selectBg = () => {\n\t\tvar str = \"<div class='row'>\";\n\t\t[1, 2, 3, 4, 5, 6, 7, 8].forEach((picNum, index) => {\n\t\t\tstr += `<div class='col-md-3'><img class='bg-image center-block' src='css/images/${picNum}.jpg' alt=${picNum}></div>`;\n\t\t\tif (picNum % 4 == 0 && picNum % 8)\n\t\t\t\tstr += \"</div><div class='row'>\";\n\t\t});\n\t\tstr += \"</div>\";\n\t\tbootbox.dialog({\n\t\t\ttitle: \"Choose a background image\",\n\t\t\tmessage: str,\n\t\t\tbuttons: {\n\t\t\t\tcancel: {\n\t\t\t\t\tlabel: \"Keep current image\",\n\t\t\t\t\tclassName: \"btn-info\",\n\t\t\t\t\tcallback: bootbox.hideAll\n\t\t\t\t},\n\t\t\t\tok: {\n\t\t\t\t\tlabel: \"Set as background \" + icons.ok,\n\t\t\t\t\tclassName: \"btn-success\",\n\t\t\t\t\tcallback: () => {\n\t\t\t\t\t\tvar imageNum = $(\".bg-image.active\").attr(\"alt\");\n\t\t\t\t\t\tif (!imageNum) {\n\t\t\t\t\t\t\tbootbox.alert({\n\t\t\t\t\t\t\t\ttitle: \"Invalid image\",\n\t\t\t\t\t\t\t\tmessage: \"Please select a valid image\",\n\t\t\t\t\t\t\t\tclassName: \"errorAlert\"\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar css = `body{\\n\\tbackground:url(./css/images/${imageNum}.jpg)no-repeat center center fixed !important;`;\n\t\t\t\t\t\tcss += \"-webkit-background-size:cover;\\n\";\n\t\t\t\t\t\tcss += \"-moz-background-size:cover;\\n\";\n\t\t\t\t\t\tcss += \"-ms-background-size:cover;\\n\";\n\t\t\t\t\t\tcss += \"-o-background-size:cover;\\n\";\n\t\t\t\t\t\tcss += \"background-size:cover;\\n}\";\n\t\t\t\t\t\tdomCache.get(\"#userStyle\").html(css);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t};\n\tvar updateMechanism = {\n\t\t//This object will update all the relevant variables\n\t\tval: function(o) {\n\t\t\treturn domCache.get(o).val();\n\t\t},\n\t\tfloat: function(value) {\n\t\t\treturn parseFloat(this.val(value));\n\t\t},\n\t\tint: function(value) {\n\t\t\treturn parseInt(this.val(value));\n\t\t},\n\t\tupdateTransformationValues: function() {\n\t\t\tx = this.int(\"#rotatexd\");\n\t\t\ty = this.int(\"#rotatey\");\n\t\t\tz = this.int(\"#rotatez\");\n\t\t\tscalex = this.float(\"#scalex\");\n\t\t\tscaley = this.float(\"#scaley\");\n\t\t\ttranslatex = this.int(\"#tranx\");\n\t\t\ttranslatey = this.int(\"#trany\");\n\t\t\ttranslatez = this.int(\"#tranz\");\n\t\t\tskewY = this.int(\"#skewy\");\n\t\t\tskewX = this.int(\"#skewx\");\n\t\t\treturn updateMechanism;\n\t\t},\n\t\tupdateBoxShadowValues: function() {\n\t\t\thor = this.val(\"#hor_axis\");\n\t\t\tver = this.val(\"#ver_axis\");\n\t\t\tblur = this.val('#blur');\n\t\t\tspread = this.val(\"#spread\");\n\t\t\ttransparency = this.float(\"#trans\");\n\t\t\tinset = this.int(\"#in\");\n\t\t\t/*colors*/\n\t\t\tred = this.int(\"#red\");\n\t\t\tgreen = this.int(\"#green\");\n\t\t\tblue = this.int(\"#blue\");\n\t\t\treturn updateMechanism;\n\t\t},\n\t\tupdateTextShadowValues: function() {\n\t\t\ttext_shadow_x_axis = this.int(\"#text_shadow_x\");\n\t\t\ttext_shadow_y_axis = this.int(\"#text_shadow_y\");\n\t\t\ttext_shadow_blur = this.float(\"#text_shadow_blur\");\n\t\t\ttext_shadow_r = this.int(\"#text_shadow_red\");\n\t\t\ttext_shadow_g = this.int(\"#text_shadow_green\");\n\t\t\ttext_shadow_b = this.int(\"#text_shadow_blue\");\n\t\t\ttext_shadow_opacity = this.float(\"#text_shadow_opacity\");\n\t\t\treturn updateMechanism;\n\t\t},\n\t\tupdateBorderRadiusValues: function() {\n\t\t\ttl = this.val(\"#tl\");\n\t\t\ttr = this.val(\"#tr\");\n\t\t\tbl = this.val(\"#bl\");\n\t\t\tbr = this.val(\"#br\");\n\t\t\treturn updateMechanism;\n\t\t},\n\t\tupdateAllValues: function() {\n\t\t\tupdateMechanism.updateTransformationValues()\n\t\t\t\t.updateBoxShadowValues()\n\t\t\t\t.updateTextShadowValues()\n\t\t\t\t.updateBorderRadiusValues();\n\t\t}\n\t};\n\tvar update = updateMechanism.updateAllValues;\n\tvar createTransformation = () => {\n\t\tvar transformationValues = [];\n\t\tif (x)\n\t\t\ttransformationValues.push(`rotateX(${x}deg)`);\n\t\tif (y)\n\t\t\ttransformationValues.push(`rotateY(${y}deg)`);\n\t\tif (z)\n\t\t\ttransformationValues.push(`rotateZ(${z}deg)`);\n\t\tif (scalex !== 1 || scaley !== 1)\n\t\t\ttransformationValues.push(`scale(${scalex},${scaley})`);\n\t\tif (translatex !== 0 || translatey !== 0 || translatez !== 0) {\n\t\t\tif (translatex !== 0 && translatey == 0 && translatez == 0)\n\t\t\t\ttransformationValues.push(`translateX(${translatex}px)`);\n\t\t\telse if (translatey !== 0 && translatex == 0 && translatez == 0)\n\t\t\t\ttransformationValues.push(`translateY(${translatey}px)`);\n\t\t\telse if (translatez !== 0 && translatex == 0 && translatey == 0)\n\t\t\t\ttransformationValues.push(`translateZ(${translatez}px)`);\n\t\t\telse if (translatex == 0)\n\t\t\t\ttransformationValues.push(`translateY(${translatey}px) translateZ(${translatez}px)`);\n\t\t\telse if (translatez == 0)\n\t\t\t\ttransformationValues.push(`translateX(${translatex}px) translateY(${translatey}px)`);\n\t\t\telse if (translatey == 0)\n\t\t\t\ttransformationValues.push(`translateX(${translatex}px) translateZ(${translatez}px)`);\n\t\t\telse\n\t\t\t\ttransformationValues.push(`translateX(${translatex}px) translateY(${translatey}px) translateZ(${translatez}px)`);\n\t\t}\n\t\t//if scalex != 1 || scaley != 1 \n\t\t//If the skew's sliders have been changed e.g, moved from 0 to 1 or from 0 to 100 add skew property\n\t\tif (skewX || skewY)\n\t\t\ttransformationValues.push(`skew(${skewX}deg,${skewY}deg)`);\n\t\treturn transformationValues.join(\" \");\n\t};\n\tvar createTextShadow = () => {\n\t\tvar shadow = \"none\";\n\t\t//fixes #issue18\n\t\tif (text_shadow_x_axis != 0 || text_shadow_y_axis != 0 != text_shadow_blur != 0) {\n\t\t\t/*\n\t\t\t ** Always add y axis value even if it is zero \n\t\t\t */\n\t\t\tshadow = `${text_shadow_x_axis}px ${text_shadow_y_axis}px ${text_shadow_blur}px`;\n\t\t\ttext_shadow_color = new Color(text_shadow_r, text_shadow_g, text_shadow_b, text_shadow_opacity).toString();\n\t\t\tshadow += text_shadow_color;\n\t\t}\n\t\treturn shadow;\n\t};\n\tvar createBoxShadow = () => {\n\t\tvar boxShadow;\n\t\t//No need to check for color because whatever the color is if the basic sliders are set to 0\n\t\t//no shadow will be shown\n\t\tif (hor + ver + blur + spread == 0) {\n\t\t\treturn \"none\";\n\t\t}\n\t\tboxShadow = `${hor}px ${ver}px ${blur}px ${spread}px`;\n\t\tcolor = new Color(red, green, blue, transparency).toString();\n\t\tif (inset) boxShadow = \"inset \" + boxShadow;\n\t\tif (boxShadow != 'none')\n\t\t\tboxShadow += color;\n\t\treturn boxShadow;\n\t};\n\tvar createRadius = () => (tl + tr + bl + br) == 0 ? 0 : `${tl}px ${tr}px ${br}px ${bl}px`;\n\t$(function() {\n\t\tdemoOutput = domCache.get(\"#totransform\");\n\t\tcheckStorage();\n\t\tsetTimeout(() => {\n\t\t\tdomCache.get(\"#selectBg\").attr(\"disabled\", false);\n\t\t}, 3300);\n\t\tvar decomposer = {\n\t\t\tdecomposeColor: (color) => {\n\t\t\t\t//Extract color values from an rgb colors\n\t\t\t\t//E.g. rgb(12,44,190)gives [12,44,190]\n\t\t\t\tvar colors = color.split(\"rgb\")[1].split(\"(\")[1].split(\",\");\n\t\t\t\tvar max = colors.length - 1;\n\t\t\t\tcolors[max] = colors[max].split(\")\")[0];\n\t\t\t\tif (len(colors) == 3)\n\t\t\t\t\tcolors.push(1);\n\t\t\t\treturn colors;\n\t\t\t},\n\t\t\tremoveColor: (code) => code.split(\"rgb\")[0],\n\t\t\t//Do not map var.If true is passed the result return is not mapped\n\t\t\tdecomposeTextShadow: (code, doNotMap) => {\n\t\t\t\tcode = decomposer.removeColor(code);\n\t\t\t\tvar shadowValues = code.trim().split(\"px\");\n\t\t\t\treturn doNotMap ? shadowValues : shadowValues.map(Number);\n\t\t\t},\n\t\t\t//Since we do the same things as we would in text shadow there is no need to\n\t\t\t//rewrite code\n\t\t\tdecomposeBoxShadow: (code) => {\n\t\t\t\tvar inset = code.indexOf(\"inset\") != -1 ? 1 : 0;\n\t\t\t\tvar array = decomposer.decomposeTextShadow(code, true);\n\t\t\t\t//remove the empty element\n\t\t\t\tarray.pop();\n\t\t\t\t//Check if there is no spread or blur before pushing inset value\n\t\t\t\twhile (len(array) < 4)\n\t\t\t\t\tarray.push(0);\n\t\t\t\tif (inset) {\n\t\t\t\t\tarray[0] = array[0].split(\"inset\")[1];\n\t\t\t\t}\n\t\t\t\t//Only after everything is finished add the inset slider\n\t\t\t\tarray.push(inset);\n\t\t\t\treturn array.map(Number);\n\t\t\t},\n\t\t\tdecomposeRadius: (code) => {\n\t\t\t\tvar radiusValues = code.match(/\\d+/g);\n\t\t\t\t//Re arrange the array\n\t\t\t\t//Values are as following :top left , top right,bottom right, bottom left\n\t\t\t\t//but the sliders are top left , top right,bottom left, bottom right\n\t\t\t\t//so swap the last 2 elements by executing an ii\n\t\t\t\t(function(array) {\n\t\t\t\t\tvar temp = array[3];\n\t\t\t\t\tarray[3] = array[2];\n\t\t\t\t\tarray[2] = temp;\n\t\t\t\t})(radiusValues);\n\t\t\t\treturn radiusValues.map(Number);\n\t\t\t},\n\t\t\tdecomposeTransformation: (code) => {\n\t\t\t\tvar extractRotationValues = (string) => {\n\t\t\t\t\tvar values = {x: 0,y: 0,z: 0};\n\t\t\t\t\tstring.replace(/\\brotate([XYZ])\\s*\\(\\s*([+-]?[\\d.]+)\\s*deg\\s*\\)/g, function(_, axis, value) {\n\t\t\t\t\t\tvalues[axis.toLowerCase()] = parseFloat(value);\n\t\t\t\t\t});\n\t\t\t\t\treturn [values.x, values.y, values.z];\n\t\t\t\t};\n\t\t\t\tvar extractScaleValues = (string) => {\n\t\t\t\t\treturn string.indexOf(\"scale(\") != -1 ?\n\t\t\t\t\t\tstring.split(\"scale(\")[1].split(\")\")[0].split(\",\").map(Number) : [0, 0];\n\t\t\t\t};\n\t\t\t\tvar extractSkewValues = (string) => {\n\t\t\t\t\tif (string.indexOf(\"skew(\") == -1)\n\t\t\t\t\t\treturn [0, 0];\n\t\t\t\t\tvar valueX = string.split(\"skew(\")[1].split(\"deg,\")[0];\n\t\t\t\t\tvar valueY = string.split(\"skew(\")[1].split(\"deg,\")[1].split(\"deg\")[0];\n\t\t\t\t\treturn [valueX, valueY].map(Number);\n\t\t\t\t};\n\t\t\t\tvar extractTranslateValues = (string) => {\n\t\t\t\t\tvar values = {x: 0,y: 0,z: 0};\n\t\t\t\t\tstring.replace(/\\btranslate([XYZ])\\s*\\(\\s*([+-]?[\\d.]+)\\s*px\\s*\\)/g, function(_, axis, value) {\n\t\t\t\t\t\tvalues[axis.toLowerCase()] = parseFloat(value);\n\t\t\t\t\t});\n\t\t\t\t\treturn [values.x, values.y, values.z];\n\t\t\t\t};\n\t\t\t\tvar rotateValues = extractRotationValues(code);\n\t\t\t\tvar scaleValues = extractScaleValues(code);\n\t\t\t\tvar translateValues = extractTranslateValues(code);\n\t\t\t\tvar skewValues = extractSkewValues(code);\n\t\t\t\t//Add all values of each array using spread operator\n\t\t\t\t//See this link for reference\n\t\t\t\t//https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator\n\t\t\t\treturn [...rotateValues, ...scaleValues, ...translateValues, ...skewValues];\n\t\t\t}\n\t\t};\n\t\tvar sliders = {\n\t\t\ttextShadowSliders: () => domCache.get(\".text_shadow_slider\"),\n\t\t\ttextShadowColors: () =>  domCache.get(\".text_color\"),\n\t\t\tboxShadowSliders: () =>  domCache.get(\".box_shadow:not(.bcolor)\"),\n\t\t\tboxShadowColors: () => domCache.get(\".bcolor\"),\n\t\t\tborderRadiusSliders: () =>  domCache.get(\".radius\"),\n\t\t\ttransformSliders: () => domCache.get(\".transform_slider\")\n\t\t};\n\t\tvar allGenerators = domCache.get(\".generatorContainer\");\n\t\tvar codeOutputs = domCache.get(\"#export li\");\n\t\tallGenerators.hide();\n\t\tcodeOutputs.hide();\n\t\t//Show transform generator and its code output\n\t\t$(codeOutputs[0]).show();\n\t\t$(allGenerators[0]).show();\n\t\t$(\".navbar-nav a\").on(\"click\", function() {\n\t\t\tallGenerators.hide();\n\t\t\tcodeOutputs.hide();\n\t\t\tvar cur = $(this);\n\t\t\tdomCache.get(\".navbar-nav li\").removeClass(\"active\");\n\t\t\tcur.parent(\"li\").addClass(\"active\");\n\t\t\tvar num = cur.data(\"panel\");\n\t\t\tdemoOutput.toggle(num != 3);\n\t\t\t$(allGenerators[num]).show(700);\n\t\t\t$(codeOutputs[num]).show(700);\n\t\t});\n\t\t//fixes #52 \n\t\t$(document.body).on('hide.bs.modal hidden.bs.modal', function() {\n\t\t\tdomCache.get('body').css('padding-right', '0');\n\t\t})\n\t\t$(\"#saveToLocal\").on(\"click\", saveToStorage);\n\t\t$(\"#clearLocal\").on(\"click\", function() {\n\t\t\tif (!localStorage || !Lockr.get(\"appData\")) {\n\t\t\t\tbootbox.alert({\n\t\t\t\t\ttitle: \"Error\",\n\t\t\t\t\tmessage: !localStorage ? \"localStorage is nor supported\" : \"There is nothing to remove\",\n\t\t\t\t\tclassName: \"errorAlert\"\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tbootbox.confirm({\n\t\t\t\ttitle: \"Warning\",\n\t\t\t\tmessage: \"Are you sure you want to clear localStorage?This will erase your favourites from localStorage\",\n\t\t\t\tbuttons: {\n\t\t\t\t\tconfirm:createBtn(`Clear localStorage ${icons.trash}`,\"btn-danger\"),\n\t\t\t\t\tcancel: {className: \"btn-success\"}\n\t\t\t\t},\n\t\t\t\tcallback: (result) => {\n\t\t\t\t\tif (result) {\n\t\t\t\t\t\tLockr.flush();\n\t\t\t\t\t\tbootbox.alert({\n\t\t\t\t\t\t\ttitle: \"Operation completed\",\n\t\t\t\t\t\t\tmessage: \"localStorage has been cleared\",\n\t\t\t\t\t\t\tbuttons: {ok: createBtn(`OK ${icons.ok}`,\"btn-success\")},\n\t\t\t\t\t\t\tclassName: \"successAlert\"\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbootbox.alert({\n\t\t\t\t\t\t\ttitle: \"Operation aborted\",\n\t\t\t\t\t\t\tmessage: \"localStorage has not been cleared\",\n\t\t\t\t\t\t\tbuttons: {ok: {className: \"btn-info\"}},\n\t\t\t\t\t\t\tclassName: \"errorAlert\"\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tclassName: \"warningAlert\"\n\t\t\t});\n\t\t});\n\t\t$(\"#removeFavouritesBtn\").on(\"click\", removefav);\n\t\t$(\"#downloadFavourites\").on(\"click\", function() {\n\t\t\tsaveCode('f');\n\t\t});\n\t\t$(\"#toggleCode\").on(\"click\",function(){\n\t\t\tdomCache.get(\"#code_output\").toggle(800,function(){\n\t\t\t\tvar display = domCache.get(\"#code_output\").is(\":visible\");\n\t\t\t\tdomCache.get(\"#toggleCode\").text(!!display?\"Hide code\":\"Show code\");\n\t\t\t});\n\t\t});\n\t\t$(\"#downloadCode\").on(\"click\", saveCode);\n\t\t$(\"body\").on(\"click\", \".list-group-item.generatorItem\", function() {\n\t\t\t$(this).toggleClass(\"active generatorItemSelected\");\n\t\t}).on('click', '.modal-backdrop', function(event) {\n\t\t\tbootbox.hideAll();\n\t\t}).on(\"click\", \".bg-image\", function() {\n\t\t\t$(\".bg-image\").removeClass(\"active\");\n\t\t\t$(this).addClass(\"active\");\n\t\t});\n\t\t$(\"#code_output .list-group\").on(\"click\", \".list-group-item\", function() {\n\t\t\t$(this).toggleClass(\"active\");\n\t\t});\n\t\t$(\"#addToFavouritesBtn\").on(\"click\", function() {\n\t\t\t//Returns an HTMLCollection\n\t\t\t//HTMLCollection does not have a forEach method\n\t\t\tvar list = $(\"#code_output .list-group .list-group-item.active\");\n\t\t\t//Convert \"list\" into an array by slicing it\n\t\t\t[...list].forEach(fn => fav($(fn).data(\"function\")));\n\t\t});\n\t\t$(\"#selectBg\").on(\"click\", selectBg);\n\t\t$(\"#controllers h1\").click(function() {\n\t\t\t$(this).next('.slider_container').toggle(800);\n\t\t});\n\t\t$(\".ultra_app\").on(\"input change touchmove\", function() {\n\t\t\tupdate();\n\t\t\tfinal_transformation = createTransformation();\n\t\t\tbshadow = createBoxShadow();\n\t\t\trad = createRadius();\n\t\t\ttext_shadow = createTextShadow();\n\t\t\tdemoOutput.css({\n\t\t\t\t\"transform\": final_transformation,\n\t\t\t\t\"box-shadow\": bshadow,\n\t\t\t\t\"border-radius\": rad\n\t\t\t});\n\t\t\tdomCache.get(\"#text_shadow_demo\").css(\"text-shadow\", text_shadow);\n\t\t\tupdateText('.transform', final_transformation||'none');\n\t\t\tupdateText('.box', bshadow);\n\t\t\tupdateText('.borderRadius', rad);\n\t\t\tupdateText(\".text_shadow_code_output\", text_shadow);\n\t\t});\n\t\t$(\"#restart\").click(function() {\n\t\t\tfinal_transformation = bshadow = text_shadow = \"none\";\n\t\t\trad = 0;\n\t\t\tdomCache.get('.ultra_app:not(#trans,#text_shadow_opacity,.scale)').val(0);\n\t\t\t// fixes #24\n\t\t\tdomCache.get('.scale,#trans,#text_shadow_opacity').val(1);\n\t\t\tdemoOutput.css({\n\t\t\t\t\"transform\": \"none\",\n\t\t\t\t\"box-shadow\": \"none\",\n\t\t\t\t\"border-radius\": \"0\"\n\t\t\t});\n\t\t\tdomCache.get(\"#text_shadow_demo\").css(\"text-shadow\", \"none\");\n\t\t\tupdateText('.transform,.box,.text_shadow_code_output,.borderRadius', \"none\");\n\t\t});\n\t\t$(\"#table_tran,#table_text,#table_box,#table_rad\").on(\"click\", \"td\", function() {\n\t\t\tvar processCode = (code, table) => {\n\t\t\t\tvar sliderValues = [];\n\t\t\t\tvar curSliders = [];\n\t\t\t\tvar colorSliders = [];\n\t\t\t\tvar colorValues = [];\n\t\t\t\t//This is the output div\n\t\t\t\tvar outputTextSelector = null;\n\t\t\t\t//The property that will be updated\n\t\t\t\tvar propertyToUpdate = null;\n\t\t\t\t//Set the sliders depending on the table clicked\n\t\t\t\tif (table == \"#table_tran\") {\n\t\t\t\t\tpropertyToUpdate = \"transform\";\n\t\t\t\t\toutputTextSelector = \".transform\";\n\t\t\t\t\tfinal_transformation = code;\n\t\t\t\t\tcurSliders = sliders.transformSliders();\n\t\t\t\t\tfinal_transformation = code;\n\t\t\t\t\tsliderValues = decomposer.decomposeTransformation(final_transformation);\n\t\t\t\t} else if (table == \"#table_text\") {\n\t\t\t\t\toutputTextSelector = \".text_shadow_code_output\";\n\t\t\t\t\ttext_shadow = code;\n\t\t\t\t\t//Here we leave the `propertyToUpdate` set to `null`\n\t\t\t\t\tdomCache.get(\"#text_shadow_demo\").css(\"text-shadow\", text_shadow);\n\t\t\t\t\tcurSliders = sliders.textShadowSliders();\n\t\t\t\t\tcolorSliders = sliders.textShadowColors();\n\t\t\t\t\tsliderValues = decomposer.decomposeTextShadow(text_shadow);\n\t\t\t\t\tcolorValues = decomposer.decomposeColor(text_shadow);\n\t\t\t\t} else if (table == \"#table_box\") {\n\t\t\t\t\tbshadow = code;\n\t\t\t\t\tpropertyToUpdate = \"box-shadow\";\n\t\t\t\t\toutputTextSelector = \".box\";\n\t\t\t\t\tcurSliders = sliders.boxShadowSliders();\n\t\t\t\t\tcolorSliders = sliders.boxShadowColors();\n\t\t\t\t\tsliderValues = decomposer.decomposeBoxShadow(bshadow);\n\t\t\t\t\tcolorValues = decomposer.decomposeColor(bshadow);\n\t\t\t\t} else {\n\t\t\t\t\trad = code;\n\t\t\t\t\tpropertyToUpdate = \"border-radius\";\n\t\t\t\t\toutputTextSelector = \".borderRadius\";\n\t\t\t\t\tcurSliders = sliders.borderRadiusSliders();\n\t\t\t\t\tsliderValues = decomposer.decomposeRadius(rad);\n\t\t\t\t}\n\t\t\t\t//If we don't want to apply text shadow\n\t\t\t\tif (propertyToUpdate)\n\t\t\t\t\tdemoOutput.css(propertyToUpdate, code);\n\t\t\t\tupdateText(outputTextSelector,code);\n\t\t\t\t[...curSliders].forEach(slider => $(slider).val(sliderValues.shift()));\n\t\t\t\t[...colorSliders].forEach(colorSlider => $(colorSlider).val(colorValues.shift()));\n\t\t\t};\n\t\t\tvar code = $(this).text();\n\t\t\t//Get the parent table id of the clicked td\n\t\t\tvar parentTable = \"#\" + $(this).closest(\"table\").attr(\"id\");\n\t\t\tprocessCode(code, parentTable);\n\t\t});\n\t});\n}(window.jQuery, window, document));\n",
			"val",
			"final_transformation",
			"options",
			"let",
			"appData",
			"createTex",
			"options",
			"getAllIndexes",
			"remov",
			"removrF",
			"createBtn",
			"createModalBtn",
			"!len",
			"color ",
			"stylecode",
			"displayItem",
			"function fav",
			"fav(",
			"icons.ok",
			"none",
			"reset",
			"selectBg",
			"saveToStorage = ",
			"log",
			"log(",
			"function fav",
			"fav(",
			"checkStorage = ",
			"updateText = ",
			"domCache = new Dom",
			"updateText",
			"saveSto",
			"checkSt",
			"fav",
			"checkStorage = ",
			"checkSto",
			"fav",
			"checkSto",
			"demoOutput",
			"/*jslint node: true */\n'use strict';\n(function($, window, documents, exports) {\n\tvar map = Array.prototype.map;\n\tvar demoOutput;\n\tvar x = '',\n\t\ty = '',\n\t\tz = '',\n\t\tfinal_transformation = 'none',\n\t\tscalex = '',\n\t\tscaley = '',\n\t\ttranslatex = '',\n\t\ttranslatey = '',\n\t\ttranslatez = '',\n\t\tskewY = '',\n\t\tskewX = '';\n\tvar hor = '',\n\t\tver = '',\n\t\tblur = '',\n\t\tspread = '',\n\t\tinset = '',\n\t\tred = \"0\",\n\t\tgreen = \"0\",\n\t\tblue = \"0\",\n\t\tcolor = 'rgb(250,48,90)',\n\t\tbshadow = 'none',\n\t\ttransparency = 1; //box-shadow\n\tvar tl = '',\n\t\ttr = '',\n\t\tbl = '',\n\t\tbr = '',\n\t\trad = 0; //border-radius\n\t//Text shadow properies\n\tvar text_shadow = \"none\",\n\t\ttext_shadow_x_axis = \"\",\n\t\ttext_shadow_y_axis = \"\",\n\t\ttext_shadow_blur = \"\";\n\t//Text shadow color\n\t//Note:We could use the color from the box-shadow but instead we choose to seperate box-shadow color from text-shadow color\n\tvar text_shadow_r = 0,\n\t\ttext_shadow_g = 0,\n\t\ttext_shadow_b = 0,\n\t\ttext_shadow_opacity = 0,\n\t\ttext_shadow_color = \"\";\n\tvar transform_fav = [],\n\t\tradius_fav = [],\n\t\tbox_fav = [],\n\t\ttext_fav = [];\n\tvar transform_col = 0,\n\t\tbox_col = 0,\n\t\tradius_col = 0,\n\t\ttext_col = 0; //columns in each table\n\tvar line = [false, false, false, false]; //this array is used to create a new row in each favourite table after adding 3 cells in each row\n\t//Select which generators you want to see on the page\n\tvar visibleGenerators = [];\n\tvar selectEnabledGenerators = function(generators) {\n\t\t//List of generators to show\n\t\tvar list = generators;\n\t\tvar allGenerators = $(\".generatorContainer\");\n\t\tvar outputs = $(\"#export .list-group-item\");\n\t\t//Hide all generators\n\t\tallGenerators.hide();\n\t\t//Hide all generator outputs\n\t\toutputs.hide();\n\t\t//http://stackoverflow.com/questions/41352896/rewrite-for-loop-as-filter-javascript\n\t\t//Maybe rewrite it to create a dom string and use it once\n\t\tvar generatorString = \".generatorContainer[data-generator=\" + (list.join(\"],.generatorContainer[data-generator=\")) + \"]\";\n\t\tvar outputString = \"outputs[\" + (list.join(\"],outputs[\")) + \"]\";\n\t\t$(generatorString).show();\n\t\tlist.forEach(item => {\n\t\t\t$(outputs[item]).show();\n\t\t});\n\t};\n\tvar showGeneratorList = function() {\n\t\tvar list;\n\t\tvar listItem = (text, index, identation) => {\n\t\t\treturn \"<div class='list-group-item generatorItem' data-index='\" + index + \"'>\" + text + \"</div>\" + (!identation ? \"\\n\" : \"\\n\\t\\t\\t\\t\");\n\t\t};\n\t\tvar markup = \"<div class ='panel panel-primary' style='margin-top:10px'>\\n\\t\";\n\t\tmarkup += \"<div class='panel-heading'>Choose which generators to show</div>\\n\\t\"\n\t\tmarkup += \"<div class='panel-body'>\\n\\t\\t\";\n\t\tmarkup += \"<div class='list-group'>\\n\\t\\t\\t\";\n\t\t[\"Css Transform\", \"Css Box Shadow\", \"Css Border Radius\", \"Css Text Shadow\"].forEach((item, index) => {\n\t\t\tmarkup += listItem(item, index, index != 3);\n\t\t});\n\t\tmarkup += \"</div>\";\n\t\tbootbox.alert({\n\t\t\tmessage: markup,\n\t\t\tcallback: function() {\n\t\t\t\t//https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\n\t\t\t\tlist = map.call($(\".generatorItemSelected\"),(i)=>$(i).data(\"index\"));\n\t\t\t\tif (list)\n\t\t\t\t\tselectEnabledGenerators(list);\n\t\t\t}\n\t\t});\n\t\t//Fix that to avoid collisions with toggle()\n\t\tvisibleGenerators = $(\".generatorContainer:visible\");\n\t\t//From each visible generatorContainer extract its data-generator value\n\t\tvar visibleGeneratorsIndex = map.call(visibleGenerators, function(i) {\n\t\t\treturn $(i).data(\"generator\");\n\t\t});\n\t\t//If there are 4 visible generatorContainer it means that all generators are visible\n\t\t//so mark them as both active and selected\n\t\tif (len(visibleGeneratorsIndex) == 4) {\n\t\t\t$(\".generatorItem\").addClass(\"active generatorItemSelected\");\n\t\t} else {\n\t\t\tvar generatorsToSelect = map.call(visibleGeneratorsIndex, function(i) {\n\t\t\t\treturn \".generatorItem[data-index=\" + i + \"]\";\n\t\t\t}).join(\",\");\n\t\t\t//Each generator that is selected also has to be marked as selected\n\t\t\t$(generatorsToSelect).addClass(\"active generatorItemSelected\");\n\t\t}\n\t};\n\tvar updateText = (selector, text) =>{\n\t\t$(selector).text(text);\n\t};\n\tvar Color = function(red, green, blue, alpha) {\n\t\tthis.r = red;\n\t\tthis.g = green;\n\t\tthis.b = blue;\n\t\tthis.a = alpha;\n\t\t//If no alpa value was provided treat this color as an rgb color by setting alpha value to 1\n\t\tif (arguments[3] == undefined)\n\t\t\tthis.a = 1;\n\t\tthis.getColor = function() {\n\t\t\tif (this.a == 1)\n\t\t\t\treturn \" rgb(\" + this.r + \",\" + this.g + \",\" + this.b + \")\";\n\t\t\telse\n\t\t\t\treturn \" rgba(\" + this.r + \",\" + this.g + \",\" + this.b + \",\" + this.a + \")\";\n\t\t\t//return this.a==1?\" rgb(\" + this.r + \",\" + this.g + \",\" + this.b + \")\":\" rgba(\" + this.r + \",\" + this.g + \",\" + this.b + \",\" + this.a + \")\";\n\t\t}\n\t\tthis.toString = this.getColor;\n\t};\n\tvar log = (obj) => console.log(obj);\n\tvar len = (obj) => obj.length;\n\tfunction saveCode(type) {\n\t\tvar prefix = (property, value) => {\n\t\t\tvar css = \"\";\n\t\t\tcss += \"-webkit-\" + property + \":\" + value + \";\\n\";\n\t\t\tcss += \"-moz-\" + property + \"   :\" + value + \";\\n\";\n\t\t\tcss += \"-ms-\" + property + \"    :\" + value + \";\\n\";\n\t\t\tcss += property + \"             :\" + value + \";\\n\";\n\t\t\treturn css;\n\t\t};\n\t\tvar file, blob;\n\t\tswitch (type) {\n\t\t\tcase \"f\":\n\t\t\t\tfile = \"/***\\n\";\n\t\t\t\tvar favourite_items = \"\";\n\t\t\t\ttransform_fav.forEach(value => {\n\t\t\t\t\tfavourite_items += prefix(\"transform\", value);\n\t\t\t\t});\n\t\t\t\tbox_fav.forEach(value => {\n\t\t\t\t\tfavourite_items += prefix(\"box-shadow\", value);\n\t\t\t\t});\n\t\t\t\tradius_fav.forEach(value => {\n\t\t\t\t\tfavourite_items += \"border-radius:\" + value + \";\\n\";\n\t\t\t\t});\n\t\t\t\t//Maybe for text shadow and border radius we can use join()\n\t\t\t\t//to join the array elements without using forEach\n\t\t\t\t// if(text_fav.length > 1)\n\t\t\t\t//favourite_items += (text-shadow+ text_fav.join(\";text-shadow:\"))+\";\"\n\t\t\t\ttext_fav.forEach(value => {\n\t\t\t\t\tfavourite_items += \"text-shadow:\" + value + \";\\n\";\n\t\t\t\t});\n\t\t\t\tfile += favourite_items;\n\t\t\t\tfile += \"***/\\n\";\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tif (bshadow == \"none\" && rad == 0 && final_transformation == \"none\" && text_shadow == \"none\")\n\t\t\t\t\treturn;\n\t\t\t\tfile = \"div{\\n\\t\";\n\t\t\t\tif (final_transformation != \"none\" && final_transformation)\n\t\t\t\t\tfile += prefix(\"transform\", final_transformation) + \"\\t\";\n\t\t\t\tif (bshadow && bshadow != \"none\")\n\t\t\t\t\tfile += prefix(\"box-shadow\", bshadow) + \"\\t\";\n\t\t\t\tif (rad != 0)\n\t\t\t\t\tfile += \"border-radius:\" + rad + \";\\n\\t\";\n\t\t\t\tif (text_shadow != \"none\")\n\t\t\t\t\tfile += \"text-shadow:\" + text_shadow + \";\\n\";\n\t\t\t\tfile += \"}\";\n\t\t\t\tbreak;\n\t\t} //switch\n\t\tblob = new Blob([file], {\n\t\t\ttype: \"text/plain;charset=utf-8\"\n\t\t});\n\t\tsaveAs(blob, type == 'f' ? 'favourites.css' : 'transformations.css');\n\t}\n\tfunction fav(type) {\n\t\tswitch (type) {\n\t\t\tcase \"text-shadow\":\n\t\t\t\tif (text_shadow && text_shadow != \"none\" && text_fav.indexOf(text_shadow) == -1) {\n\t\t\t\t\ttext_fav.push(text_shadow);\n\t\t\t\t\tif (!line[3]) {\n\t\t\t\t\t\t$(\"#table_text tbody\").append(\"<tr>\");\n\t\t\t\t\t\tline[3] = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (text_col % 3 == 0) {\n\t\t\t\t\t\t$(\"#table_text\").append(\"</tr><tr>\");\n\t\t\t\t\t}\n\t\t\t\t\t$(\"#table_text tbody tr:last\").append(\"<td class='marked text_marked'>\" + text_shadow + \"</td>\");\n\t\t\t\t\ttext_col++;\n\t\t\t\t\tupdateText(\"#text_total\", \"(\" + len(text_fav) + \")\")\n\t\t\t\t}\n\t\t\tcase \"radius\":\n\t\t\t\tif (rad !== 0 && radius_fav.indexOf(rad) == -1) {\n\t\t\t\t\tradius_fav.push(rad);\n\t\t\t\t\tif (!line[2]) {\n\t\t\t\t\t\t$(\"#table_rad tbody\").append(\"<tr>\");\n\t\t\t\t\t\tline[2] = true;\n\t\t\t\t\t}\n\t\t\t\t\tif (radius_col == 3) {\n\t\t\t\t\t\tradius_col = 0;\n\t\t\t\t\t\t$(\"#table_rad\").append(\"</tr><tr>\");\n\t\t\t\t\t}\n\t\t\t\t\t$(\"#table_rad tbody tr:last\").append(\"<td class='marked rad_marked'>\" + rad + \"</td>\");\n\t\t\t\t\tradius_col++;\n\t\t\t\t\tupdateText(\"#radius_total\", \"(\" + len(radius_fav) + \")\");\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"transform\":\n\t\t\t\tif (final_transformation && transform_fav.indexOf(final_transformation) == -1 && final_transformation !== \"rotate(0)\" && final_transformation !== \"none\") {\n\t\t\t\t\t//mind the gap after rotate(0)\n\t\t\t\t\ttransform_fav.push(final_transformation);\n\t\t\t\t\tif (!line[0]) {\n\t\t\t\t\t\t$(\"#table_tran tbody\").append(\"<tr>\");\n\t\t\t\t\t\tline[0] = true;\n\t\t\t\t\t}\n\t\t\t\t\t$(\"#table_tran tbody tr:last\").append(\"<td class='transform_marked marked'>\" + final_transformation + \"</td>\");\n\t\t\t\t\ttransform_col++;\n\t\t\t\t\tif (transform_col % 3 == 0) {\n\t\t\t\t\t\t$(\"#table_tran\").append(\"</tr><tr>\");\n\t\t\t\t\t}\n\t\t\t\t\tupdateText(\"#totaltran\", \"(\" + len(transform_fav) + \")\");\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tif (box_fav.indexOf(bshadow) == -1 && bshadow != \"none\") {\n\t\t\t\t\tbox_fav.push(bshadow);\n\t\t\t\t\tif (!line[1]) {\n\t\t\t\t\t\t$(\"#table_box tbody\").append(\"<tr>\");\n\t\t\t\t\t\tline[1] = true;\n\t\t\t\t\t}\n\t\t\t\t\t$(\"#table_box tbody tr:last\").append(\"<td class='box_marked marked'>\" + bshadow + \"</td>\");\n\t\t\t\t\tbox_col++;\n\t\t\t\t\tif (box_col % 3 == 0) {\n\t\t\t\t\t\t$(\"#table_box\").append(\"</tr><tr>\");\n\t\t\t\t\t}\n\t\t\t\t\tupdateText(\"#box_total\", \"(\" + len(box_fav) + \")\");\n\t\t\t\t} //if\n\t\t\t\tbreak;\n\t\t} //switch\n\t} //fav\n\tfunction removefav() {\n\t\tbootbox.confirm(\"Are you sure you want to delete your favourites?\", function(answer) {\n\t\t\t//bootbox.confirm() requires a callback function as the second parameter\n\t\t\tif (answer) {\n\t\t\t\t//line[0] = line[1] = line[2] = line[3] = false;\n\t\t\t\tline = line.map(function() {\n\t\t\t\t\treturn false;\n\t\t\t\t});\n\t\t\t\t//empty all the lists\n\t\t\t\tbox_fav.length = radius_fav.length = transform_fav.length = text_fav.length = 0;\n\t\t\t\tupdateText(\"#box_total,#totaltran,#radius_total,#text_total\", \"(0)\");\n\t\t\t\t$(\".marked\").remove();\n\t\t\t}\n\t\t});\n\t}\n\tvar updateMechanism = {\n\t\t//This object will update all the relevant variables\n\t\tval: function(o) {\n\t\t\treturn $(o).val();\n\t\t},\n\t\tfloat: function(value) {\n\t\t\treturn parseFloat(this.val(value));\n\t\t},\n\t\tint: function(value) {\n\t\t\treturn parseInt(this.val(value));\n\t\t},\n\t\tupdateTransformationValues: function() {\n\t\t\tx = this.int(\"#rotatexd\");\n\t\t\ty = this.int(\"#rotatey\");\n\t\t\tz = this.int(\"#rotatez\");\n\t\t\tscalex = this.float(\"#scalex\");\n\t\t\tscaley = this.float(\"#scaley\");\n\t\t\ttranslatex = this.int(\"#tranx\");\n\t\t\ttranslatey = this.int(\"#trany\");\n\t\t\ttranslatez = this.int(\"#tranz\");\n\t\t\tskewY = this.int(\"#skewy\");\n\t\t\tskewX = this.int(\"#skewx\");\n\t\t\treturn updateMechanism;\n\t\t},\n\t\tupdateBoxShadowValues: function() {\n\t\t\thor = this.val(\"#hor_axis\");\n\t\t\tver = this.val(\"#ver_axis\");\n\t\t\tblur = this.val('#blur');\n\t\t\tspread = this.val(\"#spread\");\n\t\t\ttransparency = this.float(\"#trans\");\n\t\t\tinset = this.int(\"#in\");\n\t\t\t/*colors*/\n\t\t\tred = this.int(\"#red\");\n\t\t\tgreen = this.int(\"#green\");\n\t\t\tblue = this.int(\"#blue\");\n\t\t\treturn updateMechanism;\n\t\t},\n\t\tupdateTextShadowValues: function() {\n\t\t\ttext_shadow_x_axis = this.int(\"#text_shadow_x\");\n\t\t\ttext_shadow_y_axis = this.int(\"#text_shadow_y\");\n\t\t\ttext_shadow_blur = this.float(\"#text_shadow_blur\");\n\t\t\ttext_shadow_r = this.int(\"#text_shadow_red\");\n\t\t\ttext_shadow_g = this.int(\"#text_shadow_green\");\n\t\t\ttext_shadow_b = this.int(\"#text_shadow_blue\");\n\t\t\ttext_shadow_opacity = this.float(\"#text_shadow_opacity\");\n\t\t\treturn updateMechanism;\n\t\t},\n\t\tupdateBorderRadiusValues: function() {\n\t\t\ttl = this.val(\"#tl\");\n\t\t\ttr = this.val(\"#tr\");\n\t\t\tbl = this.val(\"#bl\");\n\t\t\tbr = this.val(\"#br\");\n\t\t\treturn updateMechanism;\n\t\t},\n\t\tupdateAllValues: function() {\n\t\t\tupdateMechanism.updateTransformationValues()\n\t\t\t\t.updateBoxShadowValues()\n\t\t\t\t.updateTextShadowValues()\n\t\t\t\t.updateBorderRadiusValues();\n\t\t}\n\t};\n\tvar update = updateMechanism.updateAllValues;\n\tvar createTransformation = () => {\n\t\tvar transformationValues = [];\n\t\tvar final_transformation = \"\";\n\t\tif (x)\n\t\t\ttransformationValues.push(`rotateX(${x}deg)`);\n\t\tif (y)\n\t\t\ttransformationValues.push(`rotateY(${y}deg)`);\n\t\tif (z)\n\t\t\ttransformationValues.push(`rotateZ(${z}deg)`);\n\t\tif(scalex !==1 || scaley !== 1)\n\t\t\ttransformationValues.push(`scale(${scalex},${scaley})`);\n\t\tif (translatex !== 0 || translatey !== 0 || translatez !== 0) {\n\t\t\tif (translatex !== 0 && translatey == 0 && translatez == 0)\n\t\t\t\ttransformationValues.push(`translateX(${translatex}px)`);\n\t\t\telse if (translatey !== 0 && translatex == 0 && translatez == 0)\n\t\t\t\ttransformationValues.push(`translateY(${translatey}px)`);\n\t\t\telse if (translatez !== 0 && translatex == 0 && translatey == 0)\n\t\t\t\ttransformationValues.push(`translateZ(${translatez}px)`);\n\t\t\telse if (translatex == 0)\n\t\t\t\ttransformationValues.push(`translateY(${translatey}px) translateZ(${translatez}px)`);\n\t\t\telse if (translatez == 0)\n\t\t\t\ttransformationValues.push(`translateX(${translatex}px) translateY(${translatey}px)`);\n\t\t\telse if (translatey == 0)\n\t\t\t\ttransformationValues.push(`translateX(${translatex}px) translateZ(${translatez}px)`);\n\t\t\telse\n\t\t\t\ttransformationValues.push(`translateX(${translatex}px) translateY(${translatey}px) translateZ(${translatez}px)`);\n\t\t}\n\t\t//if scalex != 1 || scaley != 1 \n\t\t//If the skew's sliders have been changed e.g, moved from 0 to 1 or from 0 to 100 add skew property\n\t\tif (skewX || skewY)\n\t\t\ttransformationValues.push(`skew(${skewX}deg,${skewY}deg)`);\n\t\treturn transformationValues.join(\" \");\n\t};\n\tvar createTextShadow = () => {\n\t\tvar shadow = \"none\";\n\t\t//fixes #issue18\n\t\tif (text_shadow_x_axis != 0 || text_shadow_y_axis != 0 != text_shadow_blur != 0) {\n\t\t\t/*\n\t\t\t ** Always add y axis value even if it is zero \n\t\t\t */\n\t\t\tshadow = text_shadow_x_axis + \"px \" + text_shadow_y_axis + \"px \" + text_shadow_blur + \"px \";\n\t\t\ttext_shadow_color = new Color(text_shadow_r, text_shadow_g, text_shadow_b, text_shadow_opacity).toString();\n\t\t\tshadow += text_shadow_color;\n\t\t}\n\t\treturn shadow;\n\t};\n\tvar createBoxShadow = () => {\n\t\tvar boxShadow;\n\t\t//No need to check for color because whatever the color is if the basic sliders are set to 0\n\t\t//no shadow will be shown\n\t\tif (hor + ver + blur + spread == 0) {\n\t\t\treturn \"none\";\n\t\t}\n\t\tboxShadow = hor + \"px \" + ver + \"px \" + blur + \"px \" + spread + \"px\";\n\t\tcolor = new Color(red, green, blue, transparency).toString();\n\t\tif (inset) boxShadow = \"inset \" + boxShadow;\n\t\tif (boxShadow != 'none')\n\t\t\tboxShadow += color;\n\t\treturn boxShadow;\n\t};\n\tvar createRadius = () => (tl+tr+bl+br) == 0?0:`${tl}px ${tr}px ${br}px ${bl}px`;\n\t$(function() {\n\t\tvar decomposer = {\n\t\t\tdecomposeColor: (color)=>{\n\t\t\t\t//Extract color values from an rgb colors\n\t\t\t\t//E.g. rgb(12,44,190)gives [12,44,190]\n\t\t\t\tvar colors = color.split(\"rgb\")[1].split(\"(\")[1].split(\",\");\n\t\t\t\tvar max = colors.length - 1;\n\t\t\t\tcolors[max] = colors[max].split(\")\")[0];\n\t\t\t\tif (len(colors) == 3)\n\t\t\t\t\tcolors.push(1);\n\t\t\t\treturn colors;\n\t\t\t},\n\t\t\tremoveColor: (code)=>code.split(\"rgb\")[0]\n\t\t\t,\n\t\t\t//Do not map var.If true is passed the result return is not mapped\n\t\t\tdecomposeTextShadow: (code, doNotMap)=>{\n\t\t\t\tcode = decomposer.removeColor(code);\n\t\t\t\tvar shadowValues = code.trim().split(\"px\");\n\t\t\t\treturn doNotMap ? shadowValues : shadowValues.map(Number);\n\t\t\t},\n\t\t\t//Since we do the same things as we would in text shadow there is no need to\n\t\t\t//rewrite code\n\t\t\tdecomposeBoxShadow: (code)=>{\n\t\t\t\tvar inset = code.indexOf(\"inset\") != -1 ? 1 : 0;\n\t\t\t\tvar array = this.decomposeTextShadow(code, true);\n\t\t\t\t//remove the empty element\n\t\t\t\tarray.pop();\n\t\t\t\t//Check if there is no spread or blur before pushing inset value\n\t\t\t\twhile (len(array) < 4)\n\t\t\t\t\tarray.push(0);\n\t\t\t\tif (inset) {\n\t\t\t\t\tarray[0] = array[0].split(\"inset\")[1];\n\t\t\t\t}\n\t\t\t\t//Only after eerything is finished add the inset slider\n\t\t\t\tarray.push(inset);\n\t\t\t\treturn array.map(Number);\n\t\t\t},\n\t\t\tdecomposeRadius: (code)=>{\n\t\t\t\tvar radiusValues = code.split(\"px\");\n\t\t\t\t//You get an array with one empty value which is \"\"\n\t\t\t\t//so pop it\n\t\t\t\tradiusValues.pop();\n\t\t\t\t//Re arrange the array\n\t\t\t\t//Values are as following :top left , top right,bottom right, bottom left\n\t\t\t\t//but the sliders are top left , top right,bottom left, bottom right\n\t\t\t\t//so swap the last 2 elements \n\t\t\t\tvar temp = radiusValues[3];\n\t\t\t\tradiusValues[3] = radiusValues[2];\n\t\t\t\tradiusValues[2] = temp;\n\t\t\t\treturn radiusValues.map(Number);\n\t\t\t},\n\t\t\tdecomposeTransformation: (code)=>{\n\t\t\t\tvar getAllIndexes = (arr, val)=>{\n\t\t\t\t\tvar indexes = [],\n\t\t\t\t\t\ti = -1;\n\t\t\t\t\t//To understand the second parameter of indexOf function\n\t\t\t\t\t//have a look at this : https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\n\t\t\t\t\twhile ((i = arr.indexOf(val, i + 1)) != -1) {\n\t\t\t\t\t\tindexes.push(i);\n\t\t\t\t\t}\n\t\t\t\t\treturn indexes;\n\t\t\t\t};\n\t\t\t\tvar extractRotationValues = (string)=>{\n\t\t\t\t\tvar values = {\n\t\t\t\t\t\tx: 0,\n\t\t\t\t\t\ty: 0,\n\t\t\t\t\t\tz: 0\n\t\t\t\t\t};\n\t\t\t\t\tstring.replace(/\\brotate([XYZ])\\s*\\(\\s*([+-]?[\\d.]+)\\s*deg\\s*\\)/g, function(_, axis, value) {\n\t\t\t\t\t\tvalues[axis.toLowerCase()] = parseFloat(value);\n\t\t\t\t\t});\n\t\t\t\t\treturn [values.x, values.y, values.z];\n\t\t\t\t};\n\t\t\t\tvar extractScaleValues = (string)=>{\n\t\t\t\t\treturn string.indexOf(\"scale(\") != -1 ?\n\t\t\t\t\t\tstring.split(\"scale(\")[1].split(\")\")[0].split(\",\").map(Number) : [0, 0];\n\t\t\t\t};\n\t\t\t\tvar extractSkewValues = (string)=>{\n\t\t\t\t\tif (string.indexOf(\"skew(\") == -1)\n\t\t\t\t\t\treturn [0, 0];\n\t\t\t\t\tvar valueX = string.split(\"skew(\")[1].split(\"deg,\")[0];\n\t\t\t\t\tvar valueY = string.split(\"skew(\")[1].split(\"deg,\")[1].split(\"deg\")[0];\n\t\t\t\t\treturn [valueX, valueY].map(Number);\n\t\t\t\t};\n\t\t\t\tvar extractTranslateValues = (string)=>{\n\t\t\t\t\tvar values = {\n\t\t\t\t\t\tx: 0,\n\t\t\t\t\t\ty: 0,\n\t\t\t\t\t\tz: 0\n\t\t\t\t\t};\n\t\t\t\t\tstring.replace(/\\btranslate([XYZ])\\s*\\(\\s*([+-]?[\\d.]+)\\s*px\\s*\\)/g, function(_, axis, value) {\n\t\t\t\t\t\tvalues[axis.toLowerCase()] = parseFloat(value);\n\t\t\t\t\t});\n\t\t\t\t\treturn [values.x, values.y, values.z];\n\t\t\t\t};\n\t\t\t\tvar rotateValues = extractRotationValues(code);\n\t\t\t\tvar scaleValues = extractScaleValues(code);\n\t\t\t\tvar translateValues = extractTranslateValues(code);\n\t\t\t\tvar skewValues = extractSkewValues(code);\n\t\t\t\t//Add all values of each array using spread operator\n\t\t\t\t//See this link for reference\n\t\t\t\t//https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator\n\t\t\t\treturn [...rotateValues, ...scaleValues, ...translateValues, ...skewValues];\n\t\t\t}\n\t\t};\n\t\tvar sliders = {\n\t\t\ttextColors: $(\".text_color\"),\n\t\t\tboxColors: $(\".bcolor\"),\n\t\t\tboxSliders: $(\".box_shadow:not(.bcolor)\"),\n\t\t\ttextSliders: $(\".text_shadow_slider\"),\n\t\t\tradiusSliders: $(\".radius\"),\n\t\t\ttransformationSliders: $(\".transform_slider\"),\n\t\t\ttextShadowSliders: function() {\n\t\t\t\treturn sliders.textSliders;\n\t\t\t},\n\t\t\ttextShadowColors: function() {\n\t\t\t\treturn sliders.textColors;\n\t\t\t},\n\t\t\tboxShadowSliders: function() {\n\t\t\t\treturn sliders.boxSliders;\n\t\t\t},\n\t\t\tboxShadowColors: function() {\n\t\t\t\treturn sliders.boxColors;\n\t\t\t},\n\t\t\tborderRadiusSliders: function() {\n\t\t\t\treturn this.radiusSliders;\n\t\t\t},\n\t\t\ttransformSliders: function() {\n\t\t\t\treturn this.transformationSliders;\n\t\t\t}\n\t\t};\n\t\t$(\"#generatorSelector\").on(\"click\", showGeneratorList);\n\t\t$(\"#removeFavouritesBtn\").on(\"click\", removefav);\n\t\t$(\"#downloadFavourites\").on(\"click\", function() {\n\t\t\tsaveCode('f');\n\t\t});\n\t\t$(\"#downloadCode\").on(\"click\", saveCode);\n\t\t$(\"body\").on(\"click\", \".list-group-item.generatorItem\", function() {\n\t\t\t$(this).toggleClass(\"active generatorItemSelected\");\n\t\t}).on('click', '.modal-backdrop', function(event) {\n\t\t\tbootbox.hideAll();\n\t\t});\n\t\t$(\"#code_output .list-group\").on(\"click\", \".list-group-item\", function() {\n\t\t\t$(this).toggleClass(\"active\");\n\t\t});\n\t\t$(\"#addToFavouritesBtn\").on(\"click\", function() {\n\t\t\t//Returns an HTMLCollection\n\t\t\t//HTMLCollection does not have a forEach method\n\t\t\tvar list = $(\"#code_output .list-group .list-group-item.active\");\n\t\t\t//Convert \"list\" into an array by slicing it\n\t\t\t[...list].forEach(fn =>eval($(fn).data(\"function\")));\n\t\t});\n\t\tdemoOutput = $(\"#totransform\");\n\t\t$(\"#controllers h1\").click(function() {\n\t\t\t$(this).next('.slider_container').toggle(800);\n\t\t});\n\t\t//var rotate = (axis,deg)=> `rotate${axis}(${deg}deg)`\n\t\t$(\".ultra_app\").on(\"input change touchmove\", function() {\n\t\t\tupdate();\n\t\t\tfinal_transformation = createTransformation();\n\t\t\tbshadow = createBoxShadow();\n\t\t\trad = createRadius();\n\t\t\ttext_shadow = createTextShadow();\n\t\t\tdemoOutput.css({\n\t\t\t\t\"transform\": final_transformation,\n\t\t\t\t\"box-shadow\": bshadow,\n\t\t\t\t\"border-radius\": rad\n\t\t\t});\n\t\t\t$(\"#text_shadow_demo\").css(\"text-shadow\", text_shadow);\n\t\t\tupdateText('.transform', final_transformation == '' ? 'none' : final_transformation);\n\t\t\tupdateText('.box', bshadow);\n\t\t\tupdateText('.borderRadius', rad);\n\t\t\tupdateText(\".text_shadow_code_output\", text_shadow);\n\t\t});\n\t\t$(\"#restart\").click(function() {\n\t\t\tfinal_transformation = bshadow = text_shadow = \"none\";\n\t\t\trad = 0;\n\t\t\t$('.ultra_app:not(#trans,#text_shadow_opacity,.scale)').val(0);\n\t\t\t// fixes #24\n\t\t\t$('.scale,#trans,#text_shadow_opacity').val(1);\n\t\t\tdemoOutput.css({\n\t\t\t\t\"transform\": \"none\",\n\t\t\t\t\"box-shadow\": \"none\",\n\t\t\t\t\"border-radius\": \"0\"\n\t\t\t});\n\t\t\t$(\"#text_shadow_demo\").css(\"text-shadow\", \"none\");\n\t\t\tupdateText('.transform,.box,.text_shadow_code_output,.borderRadius', \"none\");\n\t\t});\n\t\t$(\"#table_tran,#table_text,#table_box,#table_rad\").on(\"click\", \"td\", function() {\n\t\t\tvar processCode = (code, table) => {\n\t\t\t\tvar sliderValues = [];\n\t\t\t\tvar curSliders = null;\n\t\t\t\tvar colorSliders = null;\n\t\t\t\tvar colorValues = null;\n\t\t\t\t//This is the output div\n\t\t\t\tvar outputTextSelector = null;\n\t\t\t\t//The property that will be updated\n\t\t\t\tvar propertyToUpdate = null;\n\t\t\t\t//Set the sliders depending on the table clicked\n\t\t\t\tif (table == \"#table_tran\") {\n\t\t\t\t\tpropertyToUpdate = \"transform\";\n\t\t\t\t\toutputTextSelector = \".transform\";\n\t\t\t\t\tfinal_transformation = code;\n\t\t\t\t\tcurSliders = sliders.sliders.transformSliders();\n\t\t\t\t\tfinal_transformation = code;\n\t\t\t\t\tsliderValues = decomposer.decomposeTransformation(final_transformation);\n\t\t\t\t} else if (table == \"#table_text\") {\n\t\t\t\t\toutputTextSelector = \".text_shadow_code_output\";\n\t\t\t\t\ttext_shadow = code;\n\t\t\t\t\t//Here we leave the `propertyToUpdate` set to `null`\n\t\t\t\t\t$(\"#text_shadow_demo\").css(\"text-shadow\", text_shadow);\n\t\t\t\t\tcurSliders = sliders.textShadowSliders();\n\t\t\t\t\tcolorSliders = sliders.textShadowColors();\n\t\t\t\t\tsliderValues = decomposer.decomposeTextShadow(text_shadow);\n\t\t\t\t\tcolorValues = decomposer.decomposeColor(text_shadow);\n\t\t\t\t} else if (table == \"#table_box\") {\n\t\t\t\t\tbshadow = code;\n\t\t\t\t\tpropertyToUpdate = \"box-shadow\";\n\t\t\t\t\toutputTextSelector = \".box\";\n\t\t\t\t\tcurSliders = sliders.boxShadowSliders();\n\t\t\t\t\tcolorSliders = sliders.boxShadowColors();\n\t\t\t\t\tsliderValues = decomposer.decomposeBoxShadow(bshadow);\n\t\t\t\t\tcolorValues = decomposer.decomposeColor(bshadow);\n\t\t\t\t} else {\n\t\t\t\t\trad = code;\n\t\t\t\t\tpropertyToUpdate = \"border-radius\";\n\t\t\t\t\toutputTextSelector = \".borderRadius\";\n\t\t\t\t\tcurSliders = sliders.borderRadiusSliders();\n\t\t\t\t\tsliderValues = decomposer.decomposeRadius(rad);\n\t\t\t\t}\n\t\t\t\t//If we don't want to apply text shadow\n\t\t\t\tif (propertyToUpdate)\n\t\t\t\t\tdemoOutput.css(propertyToUpdate, code);\n\t\t\t\t$(outputTextSelector).text(code);\n\t\t\t\t[...curSliders].forEach(slider => {\n\t\t\t\t\t$(slider).val(sliderValues.shift());\n\t\t\t\t});\n\t\t\t\tif (colorSliders)\n\t\t\t\t\t[...colorSliders].forEach(colorSlider => $(colorSlider).val(colorValues.shift()));\n\t\t\t};\n\t\t\tvar code = $(this).text();\n\t\t\t//Get the parent table id of the clicked td\n\t\t\tvar parentTable = \"#\" + $(this).closest(\"table\").attr(\"id\");\n\t\t\tprocessCode(code, parentTable);\n\t\t});\n\t});\n}(window.jQuery, window, document));\n",
			"len",
			"input type=\"range\"",
			"fixes",
			"removeFav",
			"log",
			"log(",
			"text_shadow_opacity",
			".box",
			"bshadow",
			"decomposeTextShadow",
			"decomposer.decomposeTextS",
			"decomposer",
			"= Color",
			"decompose",
			"decomp",
			"add_text_transform",
			"addRadius",
			"saveCode",
			"saceCode",
			"decomposer",
			"$text",
			"$",
			"transform_col",
			"text_shadow_y",
			"text_shadow_x",
			"addRadius",
			"var final_transformation = \"\";",
			"fav",
			"fav(",
			"fav",
			"fav(",
			"fav",
			"saving",
			">\n",
			"demoOutput",
			"no-track-sha",
			"totalLists",
			"slider-thumb-poi",
			"slider-neon",
			".slider-shadow-blue",
			"slider-transparent",
			"to_remove",
			"slider-thumb-blue",
			"node",
			"Empl",
			"Listener",
			"4360",
			"Employee",
			"Emp",
			"Client",
			"BranchStore",
			"// TODO",
			"\" input[type='range']\"",
			"getById",
			"MEH",
			"ran",
			"init",
			"\"<li class='generator_favourites list-group-item'>border-radius:\"",
			"deactivate ",
			"createList",
			"\"<li class='list-group-item'>text-shadow:\"",
			"upda",
			"animation_delay",
			"$(\"#totransform\")",
			"0000",
			"0601",
			"1e01",
			"1300",
			"isComment",
			"getFileExtension",
			"fileExists",
			"isLineEmpty",
			"removeEmptyLines"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"'",
			"saveCode"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "README.MD",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 91,
						"regions":
						{
						},
						"selection":
						[
							[
								10,
								10
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content"
							],
							"color_scheme": "Packages/User/Color Highlighter/themes/Material-Theme-Palenight.tmTheme",
							"incomplete_sync": null,
							"origPos":
							[
								0.0,
								0.0
							],
							"syncScroll": false,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "dnd.css",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 433,
						"regions":
						{
						},
						"selection":
						[
							[
								429,
								429
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										430,
										431
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										409,
										410
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"color_scheme": "Packages/User/Color Highlighter/themes/Material-Theme-Palenight.tmTheme",
							"incomplete_sync": null,
							"origPos":
							[
								0.0,
								0.0
							],
							"syncScroll": false,
							"syntax": "Packages/CSS/CSS.sublime-syntax",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "dnd.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5471,
						"regions":
						{
						},
						"selection":
						[
							[
								3204,
								3204
							]
						],
						"settings":
						{
							"auto_complete": false,
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										3203,
										3204
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										2383,
										2384
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"color_scheme": "Packages/User/Color Highlighter/themes/Material-Theme-Palenight.tmTheme",
							"history_list_is_closing": true,
							"incomplete_sync": null,
							"origPos":
							[
								0.0,
								1246.0
							],
							"remote_loading": false,
							"syncScroll": true,
							"synced": false,
							"syntax": "Packages/JavaScript/JavaScript.sublime-syntax",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1246.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "dnd.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2586,
						"regions":
						{
						},
						"selection":
						[
							[
								2322,
								2322
							]
						],
						"settings":
						{
							"auto_complete": false,
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content"
							],
							"color_scheme": "Packages/User/Color Highlighter/themes/Material-Theme-Palenight.tmTheme",
							"incomplete_sync": null,
							"origPos":
							[
								0.0,
								640.0
							],
							"remote_loading": false,
							"syncScroll": false,
							"synced": false,
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 640.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 27.0
	},
	"input":
	{
		"height": 71.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 164.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git":
	{
		"height": 168.0
	},
	"output.markdown":
	{
		"height": 214.0
	},
	"output.sftp":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 217.0
	},
	"pinned_build_system": "",
	"project": "todoList.sublime-project",
	"replace":
	{
		"height": 92.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"C:\\Users\\manos_000\\Documents\\GitHub\\miniTextShadowGenerator\\demo.html"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 147.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
